var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.327,1,2.287]],["body/controllers/AppController.html",[0,2.289,1,3.947,2,1.912,3,0.334,4,0.29,5,0.29,6,4.165,7,0.453,8,0.025,9,1.133,10,3.528,11,4.165,12,0.334,13,0.109,14,4.919,15,1.912,16,0.021,17,0.021]],["title/modules/AppModule.html",[18,1.162,19,2.287]],["body/modules/AppModule.html",[1,3.273,2,1.626,3,0.199,4,0.173,5,0.173,7,0.506,8,0.025,9,0.674,10,3.282,11,2.478,12,0.199,13,0.065,16,0.015,17,0.015,18,1.663,19,4.492,20,1.306,21,1.218,22,1.513,23,1.513,24,1.306,25,2.524,26,1.513,27,2.478,28,2.478,29,2.478,30,3.282,31,3.282,32,3.576,33,3.282,34,3.03,35,2.163,36,1.513,37,1.403,38,2.183,39,2.979,40,2.927,41,2.927,42,2.927,43,2.927,44,1.962,45,1.403,46,2.927,47,4.184,48,4.511,49,2.183,50,2.927,51,4.184,52,2.927,53,4.184,54,2.927,55,4.184,56,2.927,57,1.639,58,3.641,59,2.478,60,2.927,61,2.927,62,1.513,63,4.184,64,2.927,65,2.927,66,2.927,67,2.927,68,2.927,69,1.138,70,2.927,71,0.438,72,2.927,73,1.786,74,1.065,75,1.065,76,1.403,77,2.927,78,2.927,79,2.927,80,2.927,81,2.478,82,2.927,83,2.927,84,2.927,85,2.927,86,1.962,87,2.927,88,2.927,89,2.927,90,1.786,91,2.927]],["title/injectables/AppService.html",[10,1.911,92,1.021]],["body/injectables/AppService.html",[3,0.324,4,0.282,5,0.282,7,0.367,8,0.025,9,1.099,10,3.237,12,0.324,13,0.106,16,0.021,17,0.021,92,1.729,93,2.288,94,4.04,95,0.659,96,2.405,97,6.464,98,0.894,99,4.772,100,1.985,101,1.621,102,1.855,103,4.772,104,4.772]],["title/controllers/AuthController.html",[0,1.327,105,2.287]],["body/controllers/AuthController.html",[0,1.841,2,1.841,3,0.321,4,0.28,5,0.28,7,0.443,8,0.025,9,1.091,12,0.321,13,0.105,15,1.841,16,0.021,17,0.021,69,1.841,105,3.857,106,4.01,107,3.175,108,5.755,109,3.205,110,4.01,111,4.736,112,1.97,113,2.652,114,1.97]],["title/modules/AuthModule.html",[18,1.162,30,1.911]],["body/modules/AuthModule.html",[2,2.051,3,0.28,4,0.243,5,0.243,7,0.472,8,0.025,9,0.949,12,0.28,13,0.092,16,0.019,17,0.019,18,1.983,20,1.839,21,1.715,22,2.131,23,2.131,24,1.839,25,3.009,26,3.009,30,3.694,34,2.728,35,2.728,36,2.131,37,1.976,39,2.515,105,3.902,109,3.559,110,3.49,115,3.49,116,3.49,117,3.49,118,4.122,119,3.537,120,4.122,121,3.49]],["title/injectables/AuthService.html",[92,1.021,109,1.764]],["body/injectables/AuthService.html",[3,0.252,4,0.219,5,0.219,7,0.379,8,0.025,9,0.855,12,0.252,13,0.083,15,1.443,16,0.018,17,0.018,57,2.079,62,1.92,69,1.916,71,0.738,74,1.351,86,3.709,92,1.475,93,1.78,95,0.513,96,2.051,98,1.037,100,2.051,101,1.873,102,1.916,109,2.549,112,2.051,114,1.545,119,2.489,122,3.144,123,2.813,124,5.895,125,4.93,126,3.144,127,3.133,128,3.713,129,2.199,130,1.793,131,1.475,132,3.713,133,3.713,134,4.93,135,2.013,136,3.713,137,2.489,138,3.144,139,3.144,140,3.713,141,3.713]],["title/classes/CreateGenreDto.html",[13,0.076,142,1.911]],["body/classes/CreateGenreDto.html",[3,0.298,4,0.259,5,0.259,7,0.338,8,0.025,12,0.298,13,0.122,16,0.02,17,0.02,71,0.823,95,0.607,98,1.029,101,1.761,130,2.18,131,1.643,142,3.076,143,1.598,144,5.075,145,3.276,146,1.54,147,1.913,148,1.643,149,4.393,150,4.393,151,4.393,152,4.393,153,3.076,154,2.84,155,3.357,156,3.276,157,1.708,158,3.719,159,4.393]],["title/classes/CreateManyUsersDto.html",[13,0.076,160,1.911]],["body/classes/CreateManyUsersDto.html",[3,0.296,4,0.258,5,0.258,7,0.46,8,0.025,12,0.296,13,0.133,16,0.02,17,0.02,62,2.256,71,0.895,95,0.603,98,0.817,143,1.587,146,1.534,148,1.305,153,3.063,157,1.696,160,3.063,161,4.079,162,3.337,163,3.694,164,3.646,165,3.239,166,4.363,167,4.363,168,4.363,169,4.632,170,5.47,171,1.696,172,2.924,173,3.253,174,3.694]],["title/classes/CreateMovieDto.html",[13,0.076,175,1.911]],["body/classes/CreateMovieDto.html",[3,0.155,4,0.134,5,0.134,7,0.267,8,0.025,12,0.155,13,0.077,16,0.012,17,0.012,62,2.179,71,0.898,75,2.301,95,0.315,98,1.075,101,1.756,130,1.264,131,1.601,143,0.828,146,0.974,147,2.095,148,1.717,153,2.64,154,2.438,155,2.64,156,4.151,157,0.885,158,1.928,169,2.942,174,3.568,175,1.946,176,4.979,177,1.698,178,3.568,179,4.299,180,2.843,181,3.568,182,4.299,183,3.568,184,4.299,185,2.277,186,2.277,187,5.077,188,3.475,189,3.475,190,3.475,191,3.475,192,2.277,193,2.277,194,3.475,195,3.475,196,3.475,197,3.568,198,2.591,199,2.277,200,2.277,201,2.277,202,2.591,203,2.591,204,2.277,205,2.277,206,2.277,207,3.475,208,3.475,209,2.942,210,3.475,211,2.277,212,2.277,213,2.103,214,2.277,215,3.475,216,4.715,217,2.942,218,3.516,219,2.277,220,2.277,221,3.475,222,2.942,223,3.475,224,3.475,225,2.277,226,2.277,227,3.475,228,3.475,229,2.277,230,2.277,231,4.531,232,3.568,233,1.275,234,3.475,235,4.214,236,3.475,237,2.591,238,1.928,239,2.277,240,3.731,241,1.698,242,2.277,243,2.277,244,2.277,245,2.277,246,2.277,247,2.277,248,1.698,249,2.277,250,1.016,251,3.475,252,2.277,253,2.277,254,1.275,255,1.928,256,2.277,257,2.277,258,1.275,259,2.277,260,2.277,261,2.277]],["title/classes/CreateUserDto.html",[13,0.076,165,1.764]],["body/classes/CreateUserDto.html",[3,0.237,4,0.206,5,0.206,7,0.269,8,0.025,12,0.237,13,0.105,16,0.017,17,0.017,71,0.861,86,4.027,95,0.482,98,1.077,101,1.807,131,1.414,137,3.595,143,1.269,146,1.326,148,1.72,153,3.219,154,2.444,155,3.219,156,2.602,157,1.356,161,4.48,165,2.444,197,2.954,213,2.109,255,4.003,262,2.602,263,3.999,264,4.541,265,3.489,266,3.489,267,3.489,268,3.489,269,3.489,270,3.489,271,3.489,272,5.749,273,4.728,274,4.728,275,4.728,276,4.728,277,4.728,278,4.728,279,4.728,280,4.619,281,4.728,282,4.728,283,4.728,284,3.489,285,4.728,286,3.489,287,5.749,288,3.489,289,3.489]],["title/entities/Genre.html",[76,1.636,290,1.764]],["body/entities/Genre.html",[3,0.23,4,0.2,5,0.2,7,0.357,8,0.025,12,0.23,13,0.075,16,0.017,17,0.017,62,2.936,71,0.958,73,2.066,75,2.233,76,2.221,95,0.468,98,1.15,101,1.721,130,1.921,135,1.921,146,1.299,147,1.686,148,1.837,241,3.455,290,2.395,291,2.868,292,3.938,293,3.54,294,3.938,295,3.464,296,3.938,297,3.387,298,3.455,299,4.234,300,4.234,301,4.633,302,4.234,303,3.387,304,3.455,305,3.387,306,2.868,307,3.923,308,3.387,309,3.106,310,3.455,311,3.387,312,3.938,313,3.387,314,2.868,315,3.938,316,3.923,317,2.526,318,1.511]],["title/controllers/GenresController.html",[0,1.327,319,2.287]],["body/controllers/GenresController.html",[0,1.368,2,1.368,3,0.239,4,0.208,5,0.208,7,0.444,8,0.025,9,0.81,12,0.239,13,0.078,15,1.368,16,0.017,17,0.017,69,1.368,71,0.712,95,0.486,96,1.978,98,1.009,100,2.24,102,2.093,107,2.358,112,1.464,113,1.97,114,1.464,123,2.919,129,2.121,130,1.729,131,1.422,142,3.477,148,1.611,180,2.662,319,3.187,320,2.979,321,4.026,322,4.884,323,4.754,324,2.979,325,4.016,326,3.518,327,3.518,328,3.518,329,3.788,330,4.016,331,3.518,332,2.624,333,2.784,334,2.979,335,1.819,336,3.546,337,2.146,338,3.518,339,3.518,340,3.518,341,3.518,342,3.518,343,3.518]],["title/modules/GenresModule.html",[18,1.162,31,1.911]],["body/modules/GenresModule.html",[2,2.043,3,0.278,4,0.242,5,0.242,7,0.487,8,0.025,9,0.943,12,0.278,13,0.091,16,0.019,17,0.019,18,1.977,20,1.827,21,1.704,22,2.118,23,2.118,24,1.827,25,3,26,3,31,3.689,35,2.717,36,2.118,37,1.964,39,2.499,44,2.745,45,1.964,76,1.964,319,3.89,333,3.556,334,3.468,344,3.468,345,3.468,346,3.468,347,4.096,348,4.096,349,3.468,350,4.096]],["title/injectables/GenresService.html",[92,1.021,333,1.764]],["body/injectables/GenresService.html",[3,0.173,4,0.15,5,0.15,7,0.43,8,0.026,9,0.586,12,0.173,13,0.057,15,0.99,16,0.018,17,0.014,45,1.221,57,2.984,69,0.99,71,0.747,76,2.846,92,1.131,93,1.221,95,0.352,96,1.572,98,0.998,100,2.075,101,1.264,102,2.071,112,1.572,114,1.059,123,2.827,129,2.225,130,2.03,131,1.492,135,2.03,142,2.984,171,0.99,180,1.426,250,1.686,318,1.136,321,3.2,322,4.223,324,3.2,329,3.406,333,1.954,335,1.316,336,2.819,337,1.553,349,2.156,351,2.156,352,3.277,353,3.78,354,3.78,355,2.546,356,3.043,357,2.546,358,4.508,359,2.546,360,3.343,361,3.78,362,2.546,363,2.546,364,3.78,365,2.546,366,1.899,367,1.899,368,2.546,369,1.899,370,2.156,371,2.156,372,2.546,373,2.886,374,3.78,375,2.546,376,2.156,377,2.156,378,4.508,379,2.546,380,2.546,381,2.156,382,3.78,383,1.707,384,2.546,385,1.707,386,1.899,387,2.546,388,2.546,389,2.546,390,2.156,391,2.819,392,3.78,393,2.546,394,3.78,395,3.78,396,2.546]],["title/classes/GetMoviesDto.html",[13,0.076,397,1.911]],["body/classes/GetMoviesDto.html",[3,0.304,4,0.265,5,0.265,7,0.466,8,0.025,12,0.304,13,0.135,16,0.02,17,0.02,143,1.631,154,3.129,157,1.744,295,3.396,397,3.117,398,3.345,399,3.345,400,3.396,401,5.124,402,4.056,403,3.389,404,5.124,405,2.737,406,2.737,407,3.007,408,3.345,409,3.798,410,3.798]],["title/classes/GetUsersParamDto.html",[13,0.076,411,2.082]],["body/classes/GetUsersParamDto.html",[3,0.288,4,0.251,5,0.251,7,0.454,8,0.025,12,0.288,13,0.131,16,0.019,17,0.019,71,0.884,74,1.956,95,0.587,98,0.795,131,1.609,135,2.328,143,1.544,146,1.508,147,1.355,148,1.27,154,2.78,155,3.011,157,1.651,164,3.281,173,3.166,213,2.633,232,4.553,233,2.378,240,3.605,411,3.281,412,4.553,413,3.595,414,4.246,415,5.378,416,4.246,417,4.246,418,4.246]],["title/entities/Movie.html",[75,1.241,290,1.764]],["body/entities/Movie.html",[3,0.166,4,0.144,5,0.144,7,0.338,8,0.025,12,0.166,13,0.054,16,0.013,17,0.013,62,3.207,71,0.982,73,1.491,74,2,75,1.333,76,2.636,95,0.338,98,1.162,101,1.713,135,1.6,146,1.028,147,1.404,148,1.856,179,3.724,180,2.463,181,3.724,182,3.724,183,3.724,184,3.724,198,2.733,213,2.18,241,2.733,248,3.644,254,2.052,290,1.895,292,3.28,294,3.28,295,2.982,296,3.28,298,4.1,299,4.373,300,4.373,302,4.783,304,2.733,306,2.069,309,3.931,310,2.733,312,3.28,315,4.252,316,3.103,317,1.822,318,1.09,419,2.069,420,3.724,421,2.444,422,3.665,423,4.887,424,2.444,425,2.444,426,2.444,427,2.444,428,3.665,429,2.444,430,2.444,431,2.444,432,2.444,433,3.665,434,3.665,435,3.665,436,2.052,437,2.444,438,3.665,439,2.444,440,2.444,441,2.444,442,2.069,443,2.444,444,3.665,445,3.665]],["title/controllers/MoviesController.html",[0,1.327,446,2.287]],["body/controllers/MoviesController.html",[0,0.943,2,0.943,3,0.165,4,0.143,5,0.143,7,0.422,8,0.025,9,0.558,12,0.165,13,0.054,15,0.943,16,0.013,17,0.013,69,0.943,71,0.876,75,2.218,95,0.335,96,1.516,98,0.912,100,2.025,101,1.537,102,1.893,107,1.625,112,1.009,113,1.358,114,1.009,123,2.798,129,2.172,130,1.771,131,1.456,135,1.325,147,1.75,148,1.456,171,1.417,175,3.185,233,1.358,250,1.626,254,2.726,293,2.443,325,2.718,330,2.718,332,1.808,335,1.254,337,1.479,352,2.834,360,2.443,373,1.884,386,2.718,391,2.718,397,2.726,446,2.443,447,2.053,448,3.644,449,3.644,450,4.378,451,3.644,452,2.425,453,3.644,454,3.644,455,3.644,456,4.868,457,4.122,458,3.086,459,3.644,460,4.122,461,2.425,462,2.425,463,2.425,464,3.644,465,2.425,466,2.425,467,3.707,468,3.644,469,2.425,470,3.644,471,3.707,472,2.425,473,3.47,474,3.086,475,3.086,476,2.425,477,2.425,478,2.053,479,1.625,480,2.223,481,2.452,482,2.053,483,4.378,484,3.707,485,3.707,486,2.053,487,2.718,488,1.625,489,2.053,490,2.425,491,2.425,492,2.425,493,2.425,494,2.425,495,3.086,496,2.718,497,3.086,498,2.425,499,2.425,500,2.425,501,2.425,502,2.425,503,2.425]],["title/modules/MoviesModule.html",[18,1.162,32,2.082]],["body/modules/MoviesModule.html",[2,1.916,3,0.252,4,0.219,5,0.219,7,0.503,8,0.025,9,0.855,12,0.252,13,0.083,16,0.018,17,0.018,18,1.885,20,1.656,21,1.545,22,1.92,23,1.92,24,1.656,25,2.861,26,1.92,31,3.531,32,4.137,33,3.531,34,3.261,35,2.549,36,1.92,37,1.78,39,3.007,44,2.489,45,1.78,75,1.351,121,3.144,446,3.709,481,3.531,482,3.144,504,3.144,505,3.713,506,3.144,507,3.713,508,3.713,509,3.144,510,3.713,511,3.713,512,3.713]],["title/injectables/MoviesService.html",[92,1.021,481,1.911]],["body/injectables/MoviesService.html",[3,0.103,4,0.089,5,0.089,7,0.427,8,0.026,9,0.348,12,0.103,13,0.034,15,1.84,16,0.009,17,0.009,45,0.726,57,3.168,69,1.453,71,0.709,74,1.169,75,2.092,76,0.726,90,0.923,92,0.75,93,0.726,95,0.209,96,1.044,98,0.927,100,1.859,101,1.613,102,1.737,112,1.044,114,2.354,123,2.477,126,1.281,127,2.269,129,2.111,130,1.721,131,1.416,135,2.092,138,1.281,146,0.703,171,0.975,175,2.65,178,1.281,180,2.965,203,1.129,250,2.423,258,0.847,280,1.129,293,1.014,307,1.281,318,0.675,333,2.56,335,0.782,337,0.923,352,3.123,356,2.281,366,1.129,367,1.129,373,2.871,383,3.443,385,2.506,386,1.871,397,2.093,420,2.721,436,0.847,442,1.281,467,2.721,471,3.783,473,2.726,478,3.165,481,1.405,487,1.871,488,1.014,489,1.281,509,1.281,513,1.129,514,3.738,515,3.165,516,2.509,517,2.509,518,3.738,519,2.773,520,1.513,521,2.509,522,1.513,523,4.14,524,2.509,525,1.513,526,1.513,527,1.513,528,2.509,529,1.513,530,2.509,531,1.513,532,2.509,533,1.513,534,3.738,535,1.129,536,1.129,537,2.509,538,1.513,539,3.091,540,1.513,541,1.513,542,0.923,543,1.513,544,1.129,545,1.281,546,2.778,547,1.129,548,1.014,549,2.778,550,1.129,551,1.129,552,1.281,553,1.281,554,1.281,555,1.129,556,1.281,557,1.513,558,1.513,559,1.513,560,1.513,561,1.513,562,1.513,563,1.513,564,2.509,565,2.509,566,2.509,567,1.871,568,1.513,569,1.513,570,1.405,571,1.531,572,1.513,573,1.513,574,2.788,575,3.738,576,1.281,577,3.738,578,3.738,579,1.513,580,1.281,581,1.513,582,1.513,583,1.513,584,1.513,585,1.513,586,2.509,587,1.513,588,1.513,589,1.513,590,1.513,591,1.513,592,2.509,593,2.509,594,1.513,595,1.513,596,1.513,597,1.513,598,1.513,599,1.513,600,1.513]],["title/interfaces/Paginated.html",[542,2.082,601,2.287]],["body/interfaces/Paginated.html",[3,0.264,4,0.229,5,0.229,8,0.025,12,0.264,16,0.018,17,0.018,71,0.974,95,0.537,101,1.746,146,1.424,147,1.239,202,3.786,213,2.676,542,3.451,567,4.474,570,2.843,601,3.403,602,3.883,603,3.288,604,3.288,605,5.407,606,5.08,607,4.79,608,4.299,609,4.79,610,5.999,611,4.299,612,3.786,613,5.077,614,3.786,615,3.288,616,3.288,617,3.288,618,3.288,619,3.288,620,3.288,621,3.288,622,3.288]],["title/modules/PaginationModule.html",[18,1.162,33,1.911]],["body/modules/PaginationModule.html",[3,0.298,4,0.259,5,0.259,7,0.423,8,0.025,9,1.011,12,0.298,13,0.098,16,0.02,17,0.02,18,2.042,20,1.959,21,1.828,22,2.271,23,2.271,24,1.959,25,3.099,26,3.099,33,3.747,35,2.84,36,2.271,37,2.106,519,3.888,623,3.719,624,3.719,625,3.719,626,4.393,627,4.393]],["title/injectables/PaginationProvider.html",[92,1.021,519,1.911]],["body/injectables/PaginationProvider.html",[3,0.141,4,0.123,5,0.123,7,0.397,8,0.026,9,0.478,12,0.22,13,0.072,15,0.807,16,0.017,17,0.012,57,3.119,69,0.807,71,0.596,92,0.968,93,0.996,95,0.287,96,1.346,98,0.606,100,2.025,102,1.258,112,1.346,113,1.812,114,0.864,123,1.774,129,1.774,130,1.177,131,0.968,147,1.269,209,2.74,213,1.774,250,0.926,258,1.163,318,1.774,352,2.056,356,3.694,373,1.074,403,2.514,408,1.549,436,2.887,457,4.121,479,3.01,480,1.974,519,2.227,523,2.966,542,3.569,567,1.549,570,3.512,571,3.285,604,2.74,605,4.559,606,1.758,607,1.758,609,4.121,611,3.802,612,3.63,614,4.015,615,1.758,616,3.367,617,1.758,618,3.802,619,1.758,620,1.758,621,2.74,622,2.74,628,1.758,629,3.236,630,3.236,631,3.236,632,3.236,633,3.977,634,2.077,635,6.054,636,2.077,637,3.236,638,3.236,639,4.49,640,3.367,641,2.966,642,2.077,643,2.077,644,3.236,645,3.977,646,4.49,647,3.236,648,3.236,649,2.077,650,2.077,651,1.758,652,2.077,653,2.077,654,2.077,655,2.077,656,2.077,657,2.077,658,2.077,659,2.077,660,1.758,661,2.077,662,2.077,663,2.077,664,2.077,665,2.077,666,2.077,667,2.077,668,2.077,669,2.077,670,3.236,671,1.758,672,2.077,673,3.236,674,2.077,675,2.077,676,2.077,677,2.077,678,2.077,679,2.077,680,2.077,681,2.077,682,2.077,683,3.236,684,2.077,685,2.077,686,2.077,687,2.077,688,2.077]],["title/classes/PaginationQueryDto.html",[13,0.076,403,1.911]],["body/classes/PaginationQueryDto.html",[3,0.249,4,0.217,5,0.217,7,0.282,8,0.025,12,0.249,13,0.109,16,0.018,17,0.018,71,0.733,95,0.507,98,0.916,102,1.902,131,1.755,143,1.335,146,1.372,148,1.463,154,2.844,157,1.427,213,3.019,218,3.648,238,3.108,248,3.648,254,2.739,258,2.739,403,2.739,407,3.688,436,2.739,535,3.648,536,3.648,570,3.593,571,3.357,608,4.142,689,3.108,690,3.67,691,3.67,692,4.142,693,5.868,694,4.892,695,5.868,696,3.67,697,3.67,698,4.142,699,5.502,700,3.67,701,3.67]],["title/classes/PatchGenreDto.html",[13,0.076,329,2.082]],["body/classes/PatchGenreDto.html",[3,0.302,4,0.263,5,0.263,7,0.464,8,0.025,12,0.302,13,0.123,16,0.02,17,0.02,71,0.667,95,0.616,98,0.834,101,1.554,135,2.194,142,2.494,143,1.62,145,3.322,146,1.554,148,1.333,153,3.103,155,2.494,157,1.732,171,1.732,237,4.132,329,3.381,336,3.322,400,3.381,405,2.718,406,2.718,702,4.692,703,5.542,704,4.454,705,4.454,706,3.322]],["title/classes/PatchMovieDto.html",[13,0.076,473,2.082]],["body/classes/PatchMovieDto.html",[3,0.29,4,0.252,5,0.252,7,0.456,8,0.025,12,0.29,13,0.12,16,0.019,17,0.019,71,0.64,75,1.964,95,0.591,98,0.801,101,1.514,135,2.333,143,1.555,146,1.514,147,1.364,148,1.279,153,3.024,155,2.394,157,1.662,171,1.662,175,2.394,177,3.188,231,4.573,233,2.394,237,4.027,391,3.188,400,3.295,473,3.295,487,3.188,706,3.188,707,4.573,708,5.4,709,4.275,710,5.4,711,4.275,712,4.275,713,4.275]],["title/classes/PatchUserDto.html",[13,0.076,714,2.287]],["body/classes/PatchUserDto.html",[3,0.334,4,0.29,5,0.29,7,0.453,8,0.025,12,0.334,13,0.109,16,0.021,17,0.021,143,1.789,165,2.543,171,1.912,172,3.298,262,3.669,400,3.592,405,3.001,406,3.001,706,3.669,714,3.947,715,4.165,716,5.888]],["title/entities/User.html",[74,1.241,290,1.764]],["body/entities/User.html",[3,0.193,4,0.168,5,0.168,7,0.37,8,0.025,12,0.193,13,0.063,16,0.015,17,0.015,62,2.72,71,0.971,73,1.738,74,1.749,75,2.112,86,3.223,95,0.394,98,1.147,101,1.776,135,1.749,137,3.223,146,1.15,148,1.833,254,2.297,258,1.595,263,3.586,264,4.071,290,2.121,292,3.586,293,3.527,294,3.586,295,3.21,296,3.586,298,3.923,299,4.568,300,4.568,302,4.568,304,3.06,309,3.893,310,3.06,312,3.586,314,2.412,315,4.158,317,2.124,318,1.271,352,1.473,373,1.473,458,2.412,717,2.412,718,2.848,719,5.808,720,2.848,721,2.848,722,2.848,723,2.848,724,2.848,725,4.103,726,2.848,727,2.848,728,2.848,729,4.103,730,4.103,731,2.848,732,3.474,733,2.412,734,2.848,735,2.848,736,2.848]],["title/controllers/UsersController.html",[0,1.327,737,2.287]],["body/controllers/UsersController.html",[0,0.908,2,0.908,3,0.159,4,0.138,5,0.138,7,0.432,8,0.025,9,0.538,12,0.159,13,0.052,15,0.908,16,0.013,17,0.013,69,0.908,71,0.866,95,0.323,96,1.474,98,0.895,100,1.987,102,2.101,107,1.566,112,0.972,113,1.308,114,0.972,123,2.775,127,2.052,129,2.131,130,1.966,131,1.429,147,1.725,148,1.429,160,3.026,162,2.611,164,3.426,165,2.794,172,2.375,213,2.837,233,1.308,240,3.202,250,1.58,254,1.984,258,1.308,309,3.202,325,3.192,330,3.192,332,1.742,335,1.832,337,1.425,411,3.297,436,1.984,479,2.375,480,2.914,484,3,485,3,486,1.978,488,1.566,495,1.978,496,1.742,497,3,570,3.239,571,3.297,692,3,714,3.877,733,3,737,2.375,738,1.978,739,3.543,740,3,741,4.28,742,3.543,743,2.336,744,3.543,745,2.336,746,1.978,747,2.336,748,2.336,749,2.336,750,3.543,751,3.543,752,2.336,753,3.543,754,3,755,2.336,756,4.045,757,3.543,758,3.543,759,2.336,760,3.543,761,3.543,762,2.336,763,2.336,764,2.336,765,4.28,766,2.336,767,1.978,768,1.978,769,4.28,770,1.742,771,2.336,772,2.336,773,2.336,774,1.978,775,2.336,776,2.336,777,2.336,778,2.336,779,2.336,780,2.336,781,2.336,782,2.336,783,2.336,784,2.336]],["title/injectables/UsersCreateManyProvider.html",[92,1.021,785,1.911]],["body/injectables/UsersCreateManyProvider.html",[3,0.199,4,0.173,5,0.173,7,0.41,8,0.026,9,0.676,12,0.199,13,0.065,15,1.14,16,0.015,17,0.015,57,1.643,69,1.14,71,0.628,74,1.94,90,1.79,92,1.254,93,1.407,95,0.405,96,1.743,98,0.785,100,1.221,102,1.14,112,1.743,114,1.221,123,2.181,129,1.869,130,1.524,131,1.254,147,1.337,160,3.158,162,1.79,171,2.073,222,3.548,250,2.181,318,1.309,335,1.517,352,2.527,360,1.967,373,3.033,383,3.277,480,2.557,539,3.125,546,3.277,549,3.277,574,3.646,770,2.188,785,2.347,786,4.139,787,2.484,788,3.548,789,2.934,790,5.228,791,2.934,792,3.548,793,2.934,794,2.934,795,2.934,796,2.188,797,4.191,798,4.191,799,2.934,800,2.934,801,2.934,802,3.548,803,2.934,804,2.484,805,4.889,806,2.934,807,2.934,808,2.934,809,2.934,810,2.484,811,2.934,812,2.934,813,2.934,814,2.934,815,2.934,816,2.934,817,2.934,818,2.934,819,2.934,820,2.934,821,2.934,822,2.934,823,4.191,824,2.934,825,3.548,826,2.934,827,2.934]],["title/modules/UsersModule.html",[18,1.162,34,1.764]],["body/modules/UsersModule.html",[2,1.939,3,0.256,4,0.223,5,0.223,7,0.497,8,0.025,9,0.87,12,0.256,13,0.084,16,0.018,17,0.018,18,1.901,20,1.686,21,1.572,22,1.954,23,1.954,24,1.686,25,2.886,26,2.886,30,2.793,34,3.432,35,2.579,36,1.954,37,1.812,39,2.306,44,2.533,45,1.812,74,1.375,119,3.343,127,3.259,171,1.469,737,3.742,768,3.2,785,3.549,796,2.818,828,3.2,829,3.2,830,3.2,831,3.779,832,3.779,833,3.779,834,3.779,835,3.2,836,3.779]],["title/injectables/UsersService.html",[92,1.021,127,1.636]],["body/injectables/UsersService.html",[3,0.106,4,0.092,5,0.092,7,0.412,8,0.026,9,0.359,12,0.106,13,0.073,15,1.637,16,0.009,17,0.009,21,1.069,45,0.747,48,4.242,49,1.162,69,1.637,71,0.63,74,2.249,90,1.568,92,0.769,93,0.747,95,0.215,96,1.069,98,0.789,100,1.885,101,1.271,102,1.275,109,2.59,112,1.069,113,1.439,114,1.752,119,1.044,123,2.498,127,1.824,129,2.138,130,1.531,131,1.26,135,1.945,137,2.551,139,1.319,147,1.344,160,2.358,162,0.95,164,3.48,165,2.177,171,0.999,172,1.044,202,2.446,213,2.545,218,1.916,250,2.235,263,1.162,318,0.695,335,1.328,352,2.685,356,2.322,360,1.722,366,1.162,367,1.162,369,1.916,370,2.176,371,1.319,373,1.967,376,1.319,377,1.319,381,2.176,383,3.038,385,1.044,390,1.319,411,3.057,460,2.176,475,1.319,479,2.822,480,1.568,488,1.044,496,1.162,515,2.777,523,1.916,539,2.838,546,3.885,547,2.446,548,2.551,549,3.038,550,2.446,551,2.446,570,2.538,571,2.322,574,2.446,576,1.319,580,1.319,614,1.916,641,1.916,698,3.222,740,2.176,746,2.176,756,2.176,767,1.319,770,1.162,785,2.358,788,2.176,790,4.242,792,2.176,796,1.162,802,2.176,810,2.777,825,2.176,835,1.319,837,1.319,838,2.176,839,2.57,840,2.57,841,2.57,842,2.57,843,1.558,844,3.805,845,3.28,846,1.558,847,2.57,848,2.57,849,2.57,850,2.57,851,1.558,852,1.558,853,1.558,854,1.558,855,2.57,856,2.57,857,3.805,858,2.57,859,1.558,860,2.57,861,2.57,862,1.558,863,2.57,864,2.57,865,2.57,866,2.57,867,1.558,868,1.558,869,1.558,870,3.28,871,2.57,872,1.558,873,1.558,874,3.28,875,1.558,876,1.558,877,1.558,878,1.558,879,2.57,880,2.57,881,2.57,882,1.558,883,1.558,884,1.558,885,1.558,886,1.558,887,1.558,888,1.558,889,1.558,890,1.558,891,1.558,892,1.558,893,1.558]],["title/coverage.html",[894,3.473]],["body/coverage.html",[0,2.189,1,1.958,5,0.172,6,2.473,8,0.025,10,1.635,13,0.143,16,0.015,17,0.015,24,1.303,38,2.178,58,2.178,71,0.437,74,1.062,75,1.062,76,1.4,92,1.804,94,2.473,105,1.958,106,2.473,109,1.51,122,2.473,127,1.4,142,1.635,144,2.473,145,3.115,160,1.635,161,3.115,162,1.782,163,2.473,164,1.782,165,1.51,171,1.135,175,1.635,176,2.473,177,3.115,217,5.853,250,1.303,262,3.115,290,2.521,291,2.473,319,1.958,320,2.473,329,1.782,333,1.51,351,2.473,397,1.635,398,3.115,399,3.115,402,1.958,403,1.635,407,1.958,411,1.782,412,2.473,413,2.473,419,2.473,446,1.958,447,2.473,473,1.782,481,1.635,513,3.115,519,1.635,542,1.782,544,2.178,601,1.958,603,2.473,628,2.473,689,2.473,702,2.473,707,2.473,714,1.958,715,2.473,717,2.473,737,1.958,738,2.473,785,1.635,786,2.473,787,2.473,837,2.473,838,2.473,894,2.178,895,2.473,896,2.92,897,2.92,898,6.369,899,4.177,900,5.63,901,4.177,902,4.177,903,2.92,904,4.177,905,2.92,906,2.92,907,4.876,908,2.92,909,2.473,910,2.92,911,4.177,912,2.92,913,2.92,914,4.177,915,2.92,916,2.92]],["title/dependencies.html",[21,1.707,917,2.413]],["body/dependencies.html",[8,0.025,9,1.026,13,0.123,16,0.02,17,0.02,21,1.853,45,2.136,49,3.322,157,1.732,173,3.322,233,2.494,318,1.987,405,2.718,406,2.718,612,3.322,640,3.771,651,3.771,732,3.771,918,4.454,919,4.454,920,6.032,921,4.454,922,4.454,923,4.454,924,4.454,925,4.454,926,4.454,927,4.454,928,4.454,929,4.454,930,4.454,931,4.454,932,4.454,933,4.454,934,4.454,935,4.454,936,4.454,937,4.454]],["title/miscellaneous/functions.html",[938,1.91,939,3.475]],["body/miscellaneous/functions.html",[8,0.022,16,0.022,17,0.022,24,2.902,95,0.734,909,4.496,938,3.559,939,4.496,940,5.31]],["title/classes/getMoviesBaseDto.html",[13,0.076,402,2.287]],["body/classes/getMoviesBaseDto.html",[3,0.281,4,0.244,5,0.244,7,0.449,8,0.025,12,0.281,13,0.13,16,0.019,17,0.019,71,0.792,95,0.572,98,0.991,131,1.838,143,1.504,146,1.483,148,1.582,154,3.014,157,1.608,295,3.748,397,2.316,398,4.347,399,3.084,400,2.523,401,4.477,402,3.908,403,2.961,404,4.936,405,2.523,406,2.523,407,2.772,408,3.084,409,4.936,410,4.936,941,5.288,942,4.136,943,4.136]],["title/index.html",[95,0.394,944,2.85,945,2.85]],["body/index.html",[4,0.159,8,0.024,16,0.014,17,0.014,37,2.732,81,2.284,147,0.861,240,3.438,356,1.646,369,4.25,474,2.284,548,2.644,555,3.824,660,2.284,671,2.284,754,2.284,774,4.826,804,2.284,894,2.012,895,3.339,946,2.697,947,2.697,948,4.662,949,3.944,950,2.697,951,2.697,952,2.697,953,2.697,954,3.944,955,4.662,956,2.697,957,2.697,958,5.129,959,2.697,960,6.035,961,2.697,962,5.886,963,2.697,964,3.944,965,2.697,966,3.944,967,2.697,968,4.662,969,2.697,970,3.944,971,2.697,972,2.697,973,2.697,974,2.697,975,2.697,976,5.129,977,6.035,978,2.697,979,3.944,980,2.697,981,2.697,982,2.697,983,2.697,984,3.944,985,2.697,986,3.944,987,2.697,988,3.944,989,5.699,990,5.129,991,2.697,992,3.944,993,2.697,994,2.697,995,2.697,996,2.697,997,5.129,998,2.697,999,2.697,1000,2.697,1001,2.697,1002,3.944,1003,2.697,1004,2.697,1005,2.697,1006,2.697,1007,2.697,1008,3.944,1009,2.697,1010,2.697,1011,2.697,1012,3.944,1013,2.697,1014,2.697,1015,4.342,1016,2.697,1017,2.697,1018,2.697,1019,2.697,1020,2.697,1021,2.697,1022,2.697,1023,2.697,1024,3.944,1025,2.697,1026,2.697,1027,2.697,1028,2.697,1029,4.662,1030,2.697,1031,2.697,1032,2.697,1033,2.697,1034,2.697,1035,3.944,1036,2.697,1037,2.697,1038,2.697,1039,2.697,1040,3.944,1041,2.697,1042,2.697,1043,2.697,1044,3.944,1045,3.944,1046,2.697,1047,2.697,1048,2.697,1049,2.697,1050,2.697,1051,2.697,1052,2.697,1053,2.697,1054,2.697,1055,2.697,1056,2.697,1057,2.284,1058,2.697,1059,2.697,1060,2.697,1061,2.697,1062,2.697,1063,2.697,1064,2.284]],["title/modules.html",[20,2.077]],["body/modules.html",[8,0.021,16,0.021,17,0.021,19,3.247,20,2.161,30,2.713,31,2.713,32,2.956,33,2.713,34,2.505,1015,5.718,1065,6.753,1066,6.753,1067,6.753]],["title/overview.html",[1068,3.943]],["body/overview.html",[2,1.293,8,0.025,10,2.929,16,0.016,17,0.016,18,1.133,19,4.525,20,1.483,21,1.383,22,1.719,23,1.719,24,1.483,25,1.719,26,1.719,27,2.815,28,2.815,29,2.815,30,3.418,31,3.502,32,4.031,33,3.502,34,3.343,35,2.365,36,1.719,37,1.594,73,2.029,93,1.594,109,3.234,115,2.815,116,2.815,117,2.815,127,2.999,143,1.209,198,2.48,333,3.234,344,2.815,345,2.815,346,2.815,436,1.862,481,2.929,504,2.815,506,2.815,519,3.502,601,2.229,623,2.815,624,2.815,625,2.815,785,2.929,828,2.815,829,2.815,830,2.815,1068,2.815,1069,3.325,1070,3.325,1071,3.325,1072,3.325]],["title/properties.html",[146,1.151,917,2.413]],["body/properties.html",[8,0.025,16,0.022,17,0.022,146,1.47,147,1.674,1057,4.44,1064,4.44,1073,5.244,1074,5.244,1075,5.244]],["title/miscellaneous/variables.html",[938,1.91,1076,3.475]],["body/miscellaneous/variables.html",[8,0.025,16,0.02,17,0.02,38,3.322,58,4.132,59,3.771,71,0.667,74,1.62,75,1.62,90,2.718,95,0.616,101,1.554,135,2.407,180,2.494,203,3.322,280,3.322,385,4.044,513,3.322,535,4.132,536,4.132,544,4.132,545,3.771,546,2.986,547,3.322,548,2.986,549,2.986,550,3.322,551,3.322,552,3.771,553,3.771,554,3.771,555,3.322,556,3.771,641,3.322,938,2.986,1076,3.771,1077,4.454,1078,4.454]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/getMoviesBaseDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":217,"title":{},"body":{"classes/CreateMovieDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1074,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":436,"title":{},"body":{"entities/Movie.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["1.1.26",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":258,"title":{},"body":{"classes/CreateMovieDto.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["100",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":248,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"classes/PaginationQueryDto.html":{}}}],["1000})@isstring()@isoptional()@maxlength(1000",{"_index":192,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["10})@apiquery({name",{"_index":759,"title":{},"body":{"controllers/UsersController.html":{}}}],["10})@isnumber()@min(0)@max(10",{"_index":219,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["11",{"_index":1072,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":418,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isstring()@type(undefined",{"_index":416,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["17.13.3",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["1900",{"_index":224,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["2.1.0",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":254,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["2008",{"_index":221,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["200})@isstring()@isoptional()@minlength(3)@maxlength(200",{"_index":199,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["201",{"_index":456,"title":{},"body":{"controllers/MoviesController.html":{}}}],["250",{"_index":241,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Genre.html":{},"entities/Movie.html":{}}}],["250})@isstring()@isnotempty()@maxlength(250",{"_index":229,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["3",{"_index":198,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"overview.html":{}}}],["3/3",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["4.0.2",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["4b6a318ffba4",{"_index":246,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["4d76",{"_index":244,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["5",{"_index":1070,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":301,"title":{},"body":{"entities/Genre.html":{}}}],["6",{"_index":1069,"title":{},"body":{"overview.html":{}}}],["66",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1071,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.15.6",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":214,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["9.0",{"_index":257,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["96",{"_index":719,"title":{},"body":{"entities/User.html":{}}}],["97",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["97dc",{"_index":243,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["a9df",{"_index":245,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["abut",{"_index":613,"title":{},"body":{"interfaces/Paginated.html":{}}}],["again",{"_index":550,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["allgenres",{"_index":394,"title":{},"body":{"injectables/GenresService.html":{}}}],["allowing",{"_index":1003,"title":{},"body":{"index.html":{}}}],["already",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":1050,"title":{},"body":{"index.html":{}}}],["api",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["apibody",{"_index":483,"title":{},"body":{"controllers/MoviesController.html":{}}}],["apioperation",{"_index":484,"title":{},"body":{"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":453,"title":{},"body":{"controllers/MoviesController.html":{}}}],["apiproperty",{"_index":231,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/PatchMovieDto.html":{}}}],["apiproperty({description",{"_index":709,"title":{},"body":{"classes/PatchMovieDto.html":{}}}],["apiproperty({example",{"_index":187,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["apipropertyoptional",{"_index":232,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":414,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({example",{"_index":194,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["apiquery",{"_index":769,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":485,"title":{},"body":{"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":486,"title":{},"body":{"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["apitags('movies",{"_index":491,"title":{},"body":{"controllers/MoviesController.html":{}}}],["apitags('users",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":774,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":752,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":954,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":202,"title":{},"body":{"classes/CreateMovieDto.html":{},"interfaces/Paginated.html":{},"injectables/UsersService.html":{}}}],["arraynotempty",{"_index":234,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["async",{"_index":352,"title":{},"body":{"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":105,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":848,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1057,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":109,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":373,"title":{},"body":{"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":992,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1051,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":754,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":673,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":732,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["bcrypt.hash(this.password",{"_index":736,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":729,"title":{},"body":{"entities/User.html":{}}}],["board",{"_index":1043,"title":{},"body":{"index.html":{}}}],["body",{"_index":332,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brief",{"_index":191,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["browse",{"_index":1067,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1065,"title":{},"body":{"modules.html":{}}}],["build",{"_index":639,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["building",{"_index":949,"title":{},"body":{"index.html":{}}}],["buildpagelink",{"_index":675,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["buildpagelink(1",{"_index":684,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["buildpagelink(nextpage",{"_index":687,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["buildpagelink(page",{"_index":686,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["buildpagelink(previouspage",{"_index":688,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["buildpagelink(totalpages",{"_index":685,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["builds",{"_index":632,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["business",{"_index":840,"title":{},"body":{"injectables/UsersService.html":{}}}],["cabbot",{"_index":694,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["calculating",{"_index":661,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["catch",{"_index":574,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["cause",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":1017,"title":{},"body":{"index.html":{}}}],["character",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":369,"title":{},"body":{"injectables/GenresService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checking",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["christopher",{"_index":195,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["class",{"_index":13,"title":{"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"classes/getMoviesBaseDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/getMoviesBaseDto.html":{}}}],["classes",{"_index":143,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"classes/getMoviesBaseDto.html":{},"overview.html":{}}}],["clicks",{"_index":1002,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":987,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_genresmodule",{"_index":344,"title":{},"body":{"modules/GenresModule.html":{},"overview.html":{}}}],["cluster_genresmodule_exports",{"_index":346,"title":{},"body":{"modules/GenresModule.html":{},"overview.html":{}}}],["cluster_genresmodule_providers",{"_index":345,"title":{},"body":{"modules/GenresModule.html":{},"overview.html":{}}}],["cluster_moviesmodule",{"_index":504,"title":{},"body":{"modules/MoviesModule.html":{},"overview.html":{}}}],["cluster_moviesmodule_imports",{"_index":505,"title":{},"body":{"modules/MoviesModule.html":{}}}],["cluster_moviesmodule_providers",{"_index":506,"title":{},"body":{"modules/MoviesModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":623,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":625,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":624,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":828,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":830,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":829,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":315,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["column({type",{"_index":298,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["come",{"_index":1009,"title":{},"body":{"index.html":{}}}],["commit",{"_index":816,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["common/pagination/pagination.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["complete",{"_index":822,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":794,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":821,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connect",{"_index":802,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["connection",{"_index":825,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["console.error('database",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(moviequery",{"_index":493,"title":{},"body":{"controllers/MoviesController.html":{}}}],["const",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":843,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":789,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(genresrepository",{"_index":355,"title":{},"body":{"injectables/GenresService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(request",{"_index":634,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(usersservice",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MoviesService.html":{}}}],["constructs",{"_index":847,"title":{},"body":{"injectables/UsersService.html":{}}}],["contain",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["containing",{"_index":857,"title":{},"body":{"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MoviesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MoviesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('genres",{"_index":338,"title":{},"body":{"controllers/GenresController.html":{}}}],["controller('movies",{"_index":490,"title":{},"body":{"controllers/MoviesController.html":{}}}],["controller('users",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":657,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["courses",{"_index":1023,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":894,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":171,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(createmoviedto",{"_index":521,"title":{},"body":{"injectables/MoviesService.html":{}}}],["created",{"_index":458,"title":{},"body":{"controllers/MoviesController.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":296,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["createdby",{"_index":420,"title":{},"body":{"entities/Movie.html":{},"injectables/MoviesService.html":{}}}],["createdbyid",{"_index":178,"title":{},"body":{"classes/CreateMovieDto.html":{},"injectables/MoviesService.html":{}}}],["createddate",{"_index":292,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["creategenre",{"_index":321,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{}}}],["creategenre(@body",{"_index":340,"title":{},"body":{"controllers/GenresController.html":{}}}],["creategenre(creategenredto",{"_index":324,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{}}}],["creategenredto",{"_index":142,"title":{"classes/CreateGenreDto.html":{}},"body":{"classes/CreateGenreDto.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/PatchGenreDto.html":{},"coverage.html":{}}}],["creategenredto.name",{"_index":375,"title":{},"body":{"injectables/GenresService.html":{}}}],["createmany",{"_index":788,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":792,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":739,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":782,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":743,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":160,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":809,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["createmovie",{"_index":448,"title":{},"body":{"controllers/MoviesController.html":{}}}],["createmovie(@body",{"_index":498,"title":{},"body":{"controllers/MoviesController.html":{}}}],["createmovie(createmoviedto",{"_index":452,"title":{},"body":{"controllers/MoviesController.html":{}}}],["createmoviedto",{"_index":175,"title":{"classes/CreateMovieDto.html":{}},"body":{"classes/CreateMovieDto.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"classes/PatchMovieDto.html":{},"coverage.html":{}}}],["createmoviedto.createdbyid",{"_index":583,"title":{},"body":{"injectables/MoviesService.html":{}}}],["createmoviedto.title",{"_index":582,"title":{},"body":{"injectables/MoviesService.html":{}}}],["createmoviedto})@post",{"_index":461,"title":{},"body":{"controllers/MoviesController.html":{}}}],["creates",{"_index":454,"title":{},"body":{"controllers/MoviesController.html":{}}}],["createuser",{"_index":740,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":780,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":746,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":165,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":580,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersService.html":{}}}],["current",{"_index":609,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":617,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["dark",{"_index":227,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["data",{"_index":567,"title":{},"body":{"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["database",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"injectables/MoviesService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["database_connection",{"_index":545,"title":{},"body":{"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":790,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":295,"title":{},"body":{"entities/Genre.html":{},"classes/GetMoviesDto.html":{},"entities/Movie.html":{},"entities/User.html":{},"classes/getMoviesBaseDto.html":{}}}],["date().getfullyear",{"_index":251,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["decimal",{"_index":433,"title":{},"body":{"entities/Movie.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":148,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/getMoviesBaseDto.html":{}}}],["deeper",{"_index":1019,"title":{},"body":{"index.html":{}}}],["default",{"_index":535,"title":{},"body":{"injectables/MoviesService.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":766,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":778,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":776,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"classes/getMoviesBaseDto.html":{}}}],["delete",{"_index":478,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/MoviesService.html":{}}}],["delete('/:id",{"_index":464,"title":{},"body":{"controllers/MoviesController.html":{}}}],["delete(id",{"_index":524,"title":{},"body":{"injectables/MoviesService.html":{}}}],["deletemovie",{"_index":449,"title":{},"body":{"controllers/MoviesController.html":{}}}],["deletemovie(@param('id",{"_index":502,"title":{},"body":{"controllers/MoviesController.html":{}}}],["deletemovie(id",{"_index":463,"title":{},"body":{"controllers/MoviesController.html":{}}}],["deleting",{"_index":600,"title":{},"body":{"injectables/MoviesService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":976,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":991,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":984,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1001,"title":{},"body":{"index.html":{}}}],["description",{"_index":147,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{},"entities/Genre.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchMovieDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":460,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/UsersService.html":{}}}],["determine",{"_index":664,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["development",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1031,"title":{},"body":{"index.html":{}}}],["director",{"_index":179,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{}}}],["discord",{"_index":1016,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1018,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":895,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":856,"title":{},"body":{"injectables/UsersService.html":{}}}],["dtos/create",{"_index":335,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":488,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/pagination",{"_index":649,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":337,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"controllers/UsersController.html":{}}}],["during",{"_index":598,"title":{},"body":{"injectables/MoviesService.html":{}}}],["e2c0c4e7",{"_index":242,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["e2e",{"_index":971,"title":{},"body":{"index.html":{}}}],["each",{"_index":174,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{}}}],["eager",{"_index":423,"title":{},"body":{"entities/Movie.html":{}}}],["efficient",{"_index":950,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":982,"title":{},"body":{"index.html":{}}}],["email",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enddate",{"_index":410,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/getMoviesBaseDto.html":{}}}],["endpoint",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":980,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1034,"title":{},"body":{"index.html":{}}}],["entities",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":290,"title":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":757,"title":{},"body":{"controllers/UsersController.html":{}}}],["env",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":546,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["error.stack",{"_index":577,"title":{},"body":{"injectables/MoviesService.html":{}}}],["error_messages",{"_index":544,"title":{},"body":{"injectables/MoviesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_messages.database_connection",{"_index":578,"title":{},"body":{"injectables/MoviesService.html":{}}}],["example",{"_index":240,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exceed",{"_index":695,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["exception",{"_index":377,"title":{},"body":{"injectables/GenresService.html":{},"injectables/UsersService.html":{}}}],["exist",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":475,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/UsersService.html":{}}}],["existinggenre",{"_index":372,"title":{},"body":{"injectables/GenresService.html":{}}}],["existinguser",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":370,"title":{},"body":{"injectables/GenresService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1021,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getMoviesBaseDto.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":640,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":400,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"classes/getMoviesBaseDto.html":{}}}],["failed",{"_index":807,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["false",{"_index":309,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":995,"title":{},"body":{"index.html":{}}}],["features",{"_index":1005,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":654,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["fetched",{"_index":753,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":750,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":997,"title":{},"body":{"index.html":{}}}],["fields",{"_index":388,"title":{},"body":{"injectables/GenresService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{}}}],["filename",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["filtering",{"_index":858,"title":{},"body":{"injectables/UsersService.html":{}}}],["final",{"_index":682,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["finally",{"_index":824,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["finalresponse",{"_index":683,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":381,"title":{},"body":{"injectables/GenresService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":515,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":853,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(moviequery",{"_index":526,"title":{},"body":{"injectables/MoviesService.html":{}}}],["findmoviebyid",{"_index":516,"title":{},"body":{"injectables/MoviesService.html":{}}}],["findmoviebyid(id",{"_index":528,"title":{},"body":{"injectables/MoviesService.html":{}}}],["findmultiplegenres",{"_index":353,"title":{},"body":{"injectables/GenresService.html":{}}}],["findmultiplegenres(genres",{"_index":361,"title":{},"body":{"injectables/GenresService.html":{}}}],["findonebyid",{"_index":842,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":619,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":1004,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1037,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":385,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":948,"title":{},"body":{"index.html":{}}}],["full",{"_index":671,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["function",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":939,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1000,"title":{},"body":{"index.html":{}}}],["genre",{"_index":76,"title":{"entities/Genre.html":{}},"body":{"modules/AppModule.html":{},"entities/Genre.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"entities/Movie.html":{},"injectables/MoviesService.html":{},"coverage.html":{}}}],["genre's",{"_index":387,"title":{},"body":{"injectables/GenresService.html":{}}}],["genre.dto",{"_index":336,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/PatchGenreDto.html":{}}}],["genre.dto.ts",{"_index":145,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/PatchGenreDto.html":{},"coverage.html":{}}}],["genre.dto.ts:12",{"_index":150,"title":{},"body":{"classes/CreateGenreDto.html":{}}}],["genre.dto.ts:7",{"_index":152,"title":{},"body":{"classes/CreateGenreDto.html":{}}}],["genre.dto.ts:8",{"_index":705,"title":{},"body":{"classes/PatchGenreDto.html":{}}}],["genre.entity",{"_index":349,"title":{},"body":{"modules/GenresModule.html":{},"injectables/GenresService.html":{}}}],["genre.movies",{"_index":428,"title":{},"body":{"entities/Movie.html":{}}}],["genreids",{"_index":534,"title":{},"body":{"injectables/MoviesService.html":{}}}],["genreids.length",{"_index":560,"title":{},"body":{"injectables/MoviesService.html":{}}}],["genres",{"_index":180,"title":{},"body":{"classes/CreateMovieDto.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"entities/Movie.html":{},"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["genres.controller",{"_index":348,"title":{},"body":{"modules/GenresModule.html":{}}}],["genres.length",{"_index":559,"title":{},"body":{"injectables/MoviesService.html":{}}}],["genres/genres.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["genres_not_found",{"_index":554,"title":{},"body":{"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["genrescontroller",{"_index":319,"title":{"controllers/GenresController.html":{}},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"coverage.html":{}}}],["genresmodule",{"_index":31,"title":{"modules/GenresModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules.html":{},"overview.html":{}}}],["genresrepository",{"_index":358,"title":{},"body":{"injectables/GenresService.html":{}}}],["genresservice",{"_index":333,"title":{"injectables/GenresService.html":{}},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"coverage.html":{},"overview.html":{}}}],["genreupdate",{"_index":382,"title":{},"body":{"injectables/GenresService.html":{}}}],["get('/{:id",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/{:id}')@apioperation({summary",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/{:userid",{"_index":468,"title":{},"body":{"controllers/MoviesController.html":{}}}],["getallgenres",{"_index":322,"title":{},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{}}}],["gethello",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["getmovies",{"_index":450,"title":{},"body":{"controllers/MoviesController.html":{}}}],["getmovies(userid",{"_index":466,"title":{},"body":{"controllers/MoviesController.html":{}}}],["getmoviesbasedto",{"_index":402,"title":{"classes/getMoviesBaseDto.html":{}},"body":{"classes/GetMoviesDto.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{}}}],["getmoviesdto",{"_index":397,"title":{"classes/GetMoviesDto.html":{}},"body":{"classes/GetMoviesDto.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{}}}],["getting",{"_index":944,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":741,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":748,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":411,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["given",{"_index":645,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["graph",{"_index":1026,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1047,"title":{},"body":{"index.html":{}}}],["handle",{"_index":376,"title":{},"body":{"injectables/GenresService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":1020,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1010,"title":{},"body":{"index.html":{}}}],["hashpassword",{"_index":734,"title":{},"body":{"entities/User.html":{}}}],["hello",{"_index":103,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1024,"title":{},"body":{"index.html":{}}}],["helper",{"_index":668,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["here",{"_index":1055,"title":{},"body":{"index.html":{}}}],["hero",{"_index":190,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["host",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["http",{"_index":638,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["httpexception",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://example.com/images/dark",{"_index":207,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["https://nestjs.com",{"_index":1061,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"entities/Genre.html":{},"injectables/GenresService.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":203,"title":{},"body":{"classes/CreateMovieDto.html":{},"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["image",{"_index":261,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["image'})@isurl()@isoptional",{"_index":211,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["imageurl",{"_index":181,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getMoviesBaseDto.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/UsersModule.html":{}}}],["in(genres",{"_index":396,"title":{},"body":{"injectables/GenresService.html":{}}}],["index",{"_index":95,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/getMoviesBaseDto.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getMoviesBaseDto.html":{}}}],["information",{"_index":985,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1007,"title":{},"body":{"index.html":{}}}],["inject",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(request",{"_index":653,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":92,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":367,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(genre",{"_index":368,"title":{},"body":{"injectables/GenresService.html":{}}}],["injectrepository(movie",{"_index":557,"title":{},"body":{"injectables/MoviesService.html":{}}}],["injectrepository(user",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":637,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["install",{"_index":999,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":961,"title":{},"body":{"index.html":{}}}],["instance",{"_index":799,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["int",{"_index":438,"title":{},"body":{"entities/Movie.html":{}}}],["interact",{"_index":1027,"title":{},"body":{"index.html":{}}}],["interface",{"_index":601,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":602,"title":{},"body":{"interfaces/Paginated.html":{}}}],["interfaces/paginated.interface",{"_index":652,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["internalservererrorexception",{"_index":539,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["intersectiontype",{"_index":401,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/getMoviesBaseDto.html":{}}}],["isarray",{"_index":169,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{}}}],["isauth",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":404,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/getMoviesBaseDto.html":{}}}],["isdate()@isoptional",{"_index":941,"title":{},"body":{"classes/getMoviesBaseDto.html":{}}}],["isemail",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":713,"title":{},"body":{"classes/PatchMovieDto.html":{}}}],["isnotempty",{"_index":153,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{}}}],["isnotempty()@isarray()@validatenested({each",{"_index":166,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["isnotempty()@isuuid",{"_index":185,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["isnumber",{"_index":235,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["isoptional",{"_index":154,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/getMoviesBaseDto.html":{}}}],["isoptional()@ispositive()@max(1000",{"_index":696,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@ispositive()@max(200",{"_index":690,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":699,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":155,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{}}}],["isstring()@isnotempty()@maxlength(250",{"_index":151,"title":{},"body":{"classes/CreateGenreDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@maxlength(500",{"_index":149,"title":{},"body":{"classes/CreateGenreDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":236,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["isuuid",{"_index":237,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{}}}],["isuuid('4",{"_index":247,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["isuuid()@isnotempty",{"_index":704,"title":{},"body":{"classes/PatchGenreDto.html":{}}}],["item",{"_index":656,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["items",{"_index":608,"title":{},"body":{"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{}}}],["itemsperpage",{"_index":615,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1040,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1042,"title":{},"body":{"index.html":{}}}],["joi",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1053,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":444,"title":{},"body":{"entities/Movie.html":{}}}],["kamil",{"_index":1058,"title":{},"body":{"index.html":{}}}],["key",{"_index":978,"title":{},"body":{"index.html":{}}}],["knight",{"_index":228,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["knight.jpg",{"_index":208,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["last",{"_index":620,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":551,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["learn",{"_index":1013,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":300,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["letter",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1064,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1045,"title":{},"body":{"index.html":{}}}],["limit",{"_index":571,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limit.tostring",{"_index":678,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["linenumber",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["link",{"_index":669,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["linkedin",{"_index":1039,"title":{},"body":{"index.html":{}}}],["links",{"_index":605,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":733,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{}}}],["literal",{"_index":610,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/movies/:userid",{"_index":470,"title":{},"body":{"controllers/MoviesController.html":{}}}],["logger",{"_index":514,"title":{},"body":{"injectables/MoviesService.html":{}}}],["logger(moviesservice.name",{"_index":537,"title":{},"body":{"injectables/MoviesService.html":{}}}],["login",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":986,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1036,"title":{},"body":{"index.html":{}}}],["makes",{"_index":993,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1006,"title":{},"body":{"index.html":{}}}],["many",{"_index":162,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["many.provider",{"_index":835,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":787,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:12",{"_index":791,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:20",{"_index":793,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":316,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{}}}],["manytomany(undefined",{"_index":306,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{}}}],["manytoone",{"_index":445,"title":{},"body":{"entities/Movie.html":{}}}],["manytoone(undefined",{"_index":421,"title":{},"body":{"entities/Movie.html":{}}}],["matches",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/getMoviesBaseDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":663,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["math.max(1",{"_index":662,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":989,"title":{},"body":{"index.html":{}}}],["max",{"_index":238,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/PaginationQueryDto.html":{}}}],["max(10",{"_index":260,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["max(1000",{"_index":701,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["max(200",{"_index":700,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["max(new",{"_index":253,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["maximum",{"_index":218,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/UsersService.html":{}}}],["maxlength",{"_index":156,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1000",{"_index":249,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["maxlength(200",{"_index":256,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["maxlength(250",{"_index":158,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{}}}],["maxlength(500",{"_index":159,"title":{},"body":{"classes/CreateGenreDto.html":{}}}],["maxlength(96",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meta",{"_index":606,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":612,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["method",{"_index":566,"title":{},"body":{"injectables/MoviesService.html":{}}}],["methods",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":239,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["min(0",{"_index":259,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["min(1900",{"_index":252,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["minimum",{"_index":216,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["minlength",{"_index":197,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":255,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":938,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1044,"title":{},"body":{"index.html":{}}}],["mode",{"_index":964,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":555,"title":{},"body":{"injectables/MoviesService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["moved",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["movie",{"_index":75,"title":{"entities/Movie.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateMovieDto.html":{},"entities/Genre.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["movie'})@apiresponse({status",{"_index":455,"title":{},"body":{"controllers/MoviesController.html":{}}}],["movie.createdby",{"_index":725,"title":{},"body":{"entities/User.html":{}}}],["movie.dto",{"_index":487,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"classes/PatchMovieDto.html":{}}}],["movie.dto.ts",{"_index":177,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/PatchMovieDto.html":{},"coverage.html":{}}}],["movie.dto.ts:11",{"_index":712,"title":{},"body":{"classes/PatchMovieDto.html":{}}}],["movie.dto.ts:26",{"_index":230,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:37",{"_index":206,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:47",{"_index":193,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:58",{"_index":226,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:70",{"_index":200,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:81",{"_index":220,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:89",{"_index":212,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:93",{"_index":186,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.entity",{"_index":509,"title":{},"body":{"modules/MoviesModule.html":{},"injectables/MoviesService.html":{}}}],["movie.genres",{"_index":307,"title":{},"body":{"entities/Genre.html":{},"injectables/MoviesService.html":{}}}],["movie_not_found",{"_index":552,"title":{},"body":{"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["moviequery",{"_index":467,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/MoviesService.html":{}}}],["movies",{"_index":293,"title":{},"body":{"entities/Genre.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"entities/User.html":{}}}],["movies.controller",{"_index":508,"title":{},"body":{"modules/MoviesModule.html":{}}}],["movies.dto",{"_index":489,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/MoviesService.html":{}}}],["movies.dto.ts",{"_index":399,"title":{},"body":{"classes/GetMoviesDto.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{}}}],["movies.dto.ts:12",{"_index":942,"title":{},"body":{"classes/getMoviesBaseDto.html":{}}}],["movies.dto.ts:8",{"_index":943,"title":{},"body":{"classes/getMoviesBaseDto.html":{}}}],["movies/movies.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["moviescontroller",{"_index":446,"title":{"controllers/MoviesController.html":{}},"body":{"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"coverage.html":{}}}],["moviesmodule",{"_index":32,"title":{"modules/MoviesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MoviesModule.html":{},"modules.html":{},"overview.html":{}}}],["moviesrepository",{"_index":518,"title":{},"body":{"injectables/MoviesService.html":{}}}],["moviesservice",{"_index":481,"title":{"injectables/MoviesService.html":{}},"body":{"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"coverage.html":{},"overview.html":{}}}],["myśliwiec",{"_index":1059,"title":{},"body":{"index.html":{}}}],["name",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["navigation",{"_index":611,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["need",{"_index":1032,"title":{},"body":{"index.html":{}}}],["needs",{"_index":710,"title":{},"body":{"classes/PatchMovieDto.html":{}}}],["nest",{"_index":955,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1063,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":977,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":651,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":405,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{},"classes/getMoviesBaseDto.html":{}}}],["nestjs/platform",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":233,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MoviesController.html":{},"classes/PatchMovieDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":250,"title":{},"body":{"classes/CreateMovieDto.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newgenre",{"_index":378,"title":{},"body":{"injectables/GenresService.html":{}}}],["newmovie",{"_index":587,"title":{},"body":{"injectables/MoviesService.html":{}}}],["newuser",{"_index":810,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["newusers",{"_index":797,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":814,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":621,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":666,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":947,"title":{},"body":{"index.html":{}}}],["nolan",{"_index":196,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["notfoundexception",{"_index":366,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`genre",{"_index":384,"title":{},"body":{"injectables/GenresService.html":{}}}],["notfoundexception(`the",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(error_messages.genres_not_found",{"_index":561,"title":{},"body":{"injectables/MoviesService.html":{}}}],["notfoundexception(error_messages.movie_not_found(id",{"_index":564,"title":{},"body":{"injectables/MoviesService.html":{}}}],["notfoundexception(error_messages.user_not_found(createdbyid",{"_index":585,"title":{},"body":{"injectables/MoviesService.html":{}}}],["notfoundexception(error_messages.user_not_found(userid",{"_index":569,"title":{},"body":{"injectables/MoviesService.html":{}}}],["npm",{"_index":960,"title":{},"body":{"index.html":{}}}],["null",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":302,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["number",{"_index":213,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":665,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["object",{"_index":641,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object.assign(genre",{"_index":389,"title":{},"body":{"injectables/GenresService.html":{}}}],["object.assign(movie",{"_index":594,"title":{},"body":{"injectables/MoviesService.html":{}}}],["objectliteral",{"_index":650,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["objects",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{}}}],["occured",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["occurred",{"_index":547,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["offer",{"_index":1041,"title":{},"body":{"index.html":{}}}],["official",{"_index":990,"title":{},"body":{"index.html":{}}}],["one",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":730,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":724,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":1046,"title":{},"body":{"index.html":{}}}],["operations",{"_index":841,"title":{},"body":{"injectables/UsersService.html":{}}}],["optional",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"classes/getMoviesBaseDto.html":{}}}],["options",{"_index":647,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1068,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":670,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["p.tostring",{"_index":680,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["package",{"_index":917,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":570,"title":{},"body":{"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["paginate",{"_index":648,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginated",{"_index":542,"title":{"interfaces/Paginated.html":{}},"body":{"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginatequery",{"_index":633,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":642,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginates",{"_index":644,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":614,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["paginationmodule",{"_index":33,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":519,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/MoviesService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":646,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":403,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetMoviesDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{}}}],["param",{"_index":479,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('userid",{"_index":492,"title":{},"body":{"controllers/MoviesController.html":{}}}],["param.dto",{"_index":767,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":413,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":417,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":765,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":1033,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":706,"title":{},"body":{"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(creategenredto",{"_index":703,"title":{},"body":{"classes/PatchGenreDto.html":{}}}],["partialtype(createmoviedto",{"_index":708,"title":{},"body":{"classes/PatchMovieDto.html":{}}}],["partialtype(createuserdto",{"_index":716,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":330,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["patchgenre",{"_index":323,"title":{},"body":{"controllers/GenresController.html":{}}}],["patchgenre(@body",{"_index":342,"title":{},"body":{"controllers/GenresController.html":{}}}],["patchgenre(patchgenredto",{"_index":328,"title":{},"body":{"controllers/GenresController.html":{}}}],["patchgenredto",{"_index":329,"title":{"classes/PatchGenreDto.html":{}},"body":{"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/PatchGenreDto.html":{},"coverage.html":{}}}],["patchmoviedto",{"_index":473,"title":{"classes/PatchMovieDto.html":{}},"body":{"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"classes/PatchMovieDto.html":{},"coverage.html":{}}}],["patchmoviedto})@patch",{"_index":476,"title":{},"body":{"controllers/MoviesController.html":{}}}],["patchuser",{"_index":742,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":784,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":763,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":714,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":692,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["perform",{"_index":839,"title":{},"body":{"injectables/UsersService.html":{}}}],["permanently",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["pg",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":988,"title":{},"body":{"index.html":{}}}],["please",{"_index":548,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":760,"title":{},"body":{"controllers/UsersController.html":{}}}],["positive",{"_index":693,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["possible",{"_index":983,"title":{},"body":{"index.html":{}}}],["post",{"_index":325,"title":{},"body":{"controllers/GenresController.html":{},"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["post('create",{"_index":744,"title":{},"body":{"controllers/UsersController.html":{}}}],["poster",{"_index":210,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["postgres",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["precision",{"_index":434,"title":{},"body":{"entities/Movie.html":{}}}],["prefix",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":622,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":667,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarycolumn",{"_index":731,"title":{},"body":{"entities/User.html":{}}}],["primarygeneratedcolumn",{"_index":317,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":304,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["private",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":966,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":946,"title":{},"body":{"index.html":{}}}],["project",{"_index":958,"title":{},"body":{"index.html":{}}}],["promise",{"_index":523,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":146,"title":{"properties.html":{}},"body":{"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"classes/getMoviesBaseDto.html":{},"properties.html":{}}}],["provided",{"_index":556,"title":{},"body":{"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/genres.service",{"_index":334,"title":{},"body":{"controllers/GenresController.html":{},"modules/GenresModule.html":{}}}],["providers/movies.service",{"_index":482,"title":{},"body":{"controllers/MoviesController.html":{},"modules/MoviesModule.html":{}}}],["providers/pagination.provider",{"_index":627,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/users",{"_index":834,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":768,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providing",{"_index":629,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["public",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":480,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["query'})@apiquery({name",{"_index":755,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":775,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":777,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":408,"title":{},"body":{"classes/GetMoviesDto.html":{},"injectables/PaginationProvider.html":{},"classes/getMoviesBaseDto.html":{}}}],["query.dto.ts",{"_index":689,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:11",{"_index":691,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:20",{"_index":697,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":800,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":817,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":803,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":811,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":813,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":826,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":820,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":806,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1014,"title":{},"body":{"index.html":{}}}],["rating",{"_index":182,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{}}}],["read",{"_index":1054,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":975,"title":{},"body":{"index.html":{}}}],["real",{"_index":1028,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":751,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":563,"title":{},"body":{"injectables/MoviesService.html":{}}}],["release",{"_index":222,"title":{},"body":{"classes/CreateMovieDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["releaseyear",{"_index":183,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{}}}],["repositories",{"_index":631,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository",{"_index":356,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.findandcount",{"_index":658,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":635,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requested",{"_index":672,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requesttimeoutexception",{"_index":795,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception('could",{"_index":827,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["required",{"_index":756,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["requiring",{"_index":996,"title":{},"body":{"index.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1008,"title":{},"body":{"index.html":{}}}],["response",{"_index":457,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/PaginationProvider.html":{}}}],["responses",{"_index":604,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["result",{"_index":812,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/getMoviesBaseDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":698,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/UsersService.html":{}}}],["retrieves",{"_index":855,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieving",{"_index":576,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":758,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":819,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["run",{"_index":962,"title":{},"body":{"index.html":{}}}],["runner",{"_index":798,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["runs",{"_index":981,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":371,"title":{},"body":{"injectables/GenresService.html":{},"injectables/UsersService.html":{}}}],["sample_token",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":390,"title":{},"body":{"injectables/GenresService.html":{},"injectables/UsersService.html":{}}}],["saving",{"_index":590,"title":{},"body":{"injectables/MoviesService.html":{}}}],["scalable",{"_index":951,"title":{},"body":{"index.html":{}}}],["scale",{"_index":435,"title":{},"body":{"entities/Movie.html":{}}}],["server",{"_index":952,"title":{},"body":{"index.html":{}}}],["service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GenresController.html":{},"controllers/MoviesController.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":959,"title":{},"body":{"index.html":{}}}],["side",{"_index":953,"title":{},"body":{"index.html":{}}}],["simple",{"_index":998,"title":{},"body":{"index.html":{}}}],["single",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["skip",{"_index":659,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"modules/GenresModule.html":{},"injectables/GenresService.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"modules/MoviesModule.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"classes/PatchUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getMoviesBaseDto.html":{},"index.html":{}}}],["special",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":415,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":1049,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":940,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../movies.service.ts",{"_index":1078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":833,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:14",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:20",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":407,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":543,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":603,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":511,"title":{},"body":{"modules/MoviesModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":626,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":541,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":628,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:16",{"_index":636,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:33",{"_index":643,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/genres/dtos/create",{"_index":144,"title":{},"body":{"classes/CreateGenreDto.html":{},"coverage.html":{}}}],["src/genres/dtos/patch",{"_index":702,"title":{},"body":{"classes/PatchGenreDto.html":{},"coverage.html":{}}}],["src/genres/genre.entity",{"_index":442,"title":{},"body":{"entities/Movie.html":{},"injectables/MoviesService.html":{}}}],["src/genres/genre.entity.ts",{"_index":291,"title":{},"body":{"entities/Genre.html":{},"coverage.html":{}}}],["src/genres/genre.entity.ts:14",{"_index":305,"title":{},"body":{"entities/Genre.html":{}}}],["src/genres/genre.entity.ts:22",{"_index":311,"title":{},"body":{"entities/Genre.html":{}}}],["src/genres/genre.entity.ts:29",{"_index":303,"title":{},"body":{"entities/Genre.html":{}}}],["src/genres/genre.entity.ts:32",{"_index":308,"title":{},"body":{"entities/Genre.html":{}}}],["src/genres/genre.entity.ts:35",{"_index":297,"title":{},"body":{"entities/Genre.html":{}}}],["src/genres/genre.entity.ts:38",{"_index":313,"title":{},"body":{"entities/Genre.html":{}}}],["src/genres/genres.controller.ts",{"_index":320,"title":{},"body":{"controllers/GenresController.html":{},"coverage.html":{}}}],["src/genres/genres.controller.ts:16",{"_index":327,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/genres/genres.controller.ts:21",{"_index":326,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/genres/genres.controller.ts:26",{"_index":331,"title":{},"body":{"controllers/GenresController.html":{}}}],["src/genres/genres.module",{"_index":510,"title":{},"body":{"modules/MoviesModule.html":{}}}],["src/genres/genres.module.ts",{"_index":347,"title":{},"body":{"modules/GenresModule.html":{}}}],["src/genres/providers/genres.service",{"_index":540,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/genres/providers/genres.service.ts",{"_index":351,"title":{},"body":{"injectables/GenresService.html":{},"coverage.html":{}}}],["src/genres/providers/genres.service.ts:18",{"_index":359,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/genres/providers/genres.service.ts:32",{"_index":365,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/genres/providers/genres.service.ts:52",{"_index":363,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/genres/providers/genres.service.ts:57",{"_index":362,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/genres/providers/genres.service.ts:9",{"_index":357,"title":{},"body":{"injectables/GenresService.html":{}}}],["src/main.ts",{"_index":909,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/movies/dtos/create",{"_index":176,"title":{},"body":{"classes/CreateMovieDto.html":{},"coverage.html":{}}}],["src/movies/dtos/get",{"_index":398,"title":{},"body":{"classes/GetMoviesDto.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{}}}],["src/movies/dtos/patch",{"_index":707,"title":{},"body":{"classes/PatchMovieDto.html":{},"coverage.html":{}}}],["src/movies/movie.entity",{"_index":314,"title":{},"body":{"entities/Genre.html":{},"entities/User.html":{}}}],["src/movies/movie.entity.ts",{"_index":419,"title":{},"body":{"entities/Movie.html":{},"coverage.html":{}}}],["src/movies/movie.entity.ts:17",{"_index":431,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:25",{"_index":440,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:32",{"_index":426,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:38",{"_index":439,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:45",{"_index":427,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:53",{"_index":437,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:60",{"_index":432,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:64",{"_index":430,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:70",{"_index":424,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:73",{"_index":425,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movie.entity.ts:76",{"_index":441,"title":{},"body":{"entities/Movie.html":{}}}],["src/movies/movies.controller.ts",{"_index":447,"title":{},"body":{"controllers/MoviesController.html":{},"coverage.html":{}}}],["src/movies/movies.controller.ts:31",{"_index":469,"title":{},"body":{"controllers/MoviesController.html":{}}}],["src/movies/movies.controller.ts:51",{"_index":462,"title":{},"body":{"controllers/MoviesController.html":{}}}],["src/movies/movies.controller.ts:67",{"_index":477,"title":{},"body":{"controllers/MoviesController.html":{}}}],["src/movies/movies.controller.ts:72",{"_index":465,"title":{},"body":{"controllers/MoviesController.html":{}}}],["src/movies/movies.module.ts",{"_index":507,"title":{},"body":{"modules/MoviesModule.html":{}}}],["src/movies/providers/movies.service.ts",{"_index":513,"title":{},"body":{"injectables/MoviesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/movies/providers/movies.service.ts:126",{"_index":531,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/movies/providers/movies.service.ts:150",{"_index":525,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/movies/providers/movies.service.ts:27",{"_index":520,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/movies/providers/movies.service.ts:48",{"_index":538,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/movies/providers/movies.service.ts:50",{"_index":533,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/movies/providers/movies.service.ts:59",{"_index":529,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/movies/providers/movies.service.ts:71",{"_index":527,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/movies/providers/movies.service.ts:96",{"_index":522,"title":{},"body":{"injectables/MoviesService.html":{}}}],["src/users/dtos/create",{"_index":161,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":412,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":715,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":786,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MoviesService.html":{}}}],["src/users/providers/users.service.ts",{"_index":837,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:122",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:141",{"_index":851,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:25",{"_index":846,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:52",{"_index":852,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:96",{"_index":854,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":443,"title":{},"body":{"entities/Movie.html":{}}}],["src/users/user.entity.ts",{"_index":717,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:17",{"_index":722,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:24",{"_index":721,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:31",{"_index":723,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":720,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":727,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:49",{"_index":726,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:52",{"_index":718,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:55",{"_index":728,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":738,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:51",{"_index":762,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":747,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:65",{"_index":745,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":764,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"modules/MoviesModule.html":{}}}],["src/users/users.module.ts",{"_index":831,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":804,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":965,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":967,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":409,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/getMoviesBaseDto.html":{}}}],["started",{"_index":945,"title":{"index.html":{}},"body":{}}],["starter",{"_index":957,"title":{},"body":{"index.html":{}}}],["starting",{"_index":808,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["statements",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":496,"title":{},"body":{"controllers/MoviesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["stay",{"_index":1035,"title":{},"body":{"index.html":{}}}],["steps",{"_index":979,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":994,"title":{},"body":{"index.html":{}}}],["string",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"injectables/GenresService.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":823,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["successful",{"_index":815,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["successfully",{"_index":497,"title":{},"body":{"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apibody({description",{"_index":459,"title":{},"body":{"controllers/MoviesController.html":{}}}],["summary",{"_index":495,"title":{},"body":{"controllers/MoviesController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1015,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1066,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":607,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":838,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":660,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["test",{"_index":970,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":973,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":972,"title":{},"body":{"index.html":{}}}],["tests",{"_index":968,"title":{},"body":{"index.html":{}}}],["tha",{"_index":215,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["thanks",{"_index":1048,"title":{},"body":{"index.html":{}}}],["this.datasource.createqueryrunner",{"_index":801,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.findmoviebyid(id",{"_index":593,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.genresrepository.create(creategenredto",{"_index":379,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genresrepository.find",{"_index":395,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genresrepository.findone",{"_index":374,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genresrepository.save(genre",{"_index":393,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genresrepository.save(newgenre",{"_index":380,"title":{},"body":{"injectables/GenresService.html":{}}}],["this.genresservice.creategenre(creategenredto",{"_index":341,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.genresservice.findmultiplegenres(genreids",{"_index":558,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.genresservice.getallgenres",{"_index":339,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.genresservice.updategenre(patchgenredto",{"_index":343,"title":{},"body":{"controllers/GenresController.html":{}}}],["this.logger.debug",{"_index":579,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.logger.debug(`starting",{"_index":565,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.logger.debug(`updating",{"_index":591,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.logger.error('error",{"_index":575,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.logger.error(`movie",{"_index":597,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.moviesrepository",{"_index":573,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.moviesrepository.create",{"_index":588,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.moviesrepository.delete(id",{"_index":599,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.moviesrepository.findone",{"_index":562,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.moviesrepository.save(movie",{"_index":595,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.moviesrepository.save(newmovie",{"_index":589,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.moviesservice.create(createmoviedto",{"_index":499,"title":{},"body":{"controllers/MoviesController.html":{}}}],["this.moviesservice.delete(id",{"_index":503,"title":{},"body":{"controllers/MoviesController.html":{}}}],["this.moviesservice.findall(moviequery",{"_index":494,"title":{},"body":{"controllers/MoviesController.html":{}}}],["this.moviesservice.update(patchmoviedto",{"_index":501,"title":{},"body":{"controllers/MoviesController.html":{}}}],["this.paginationprovider.paginatequery",{"_index":572,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.password",{"_index":735,"title":{},"body":{"entities/User.html":{}}}],["this.request.protocol}://${this.request.headers.host",{"_index":674,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.userscreatemanyusers.createmany(createmanyusersdto",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createmany(createmanyusersdto",{"_index":783,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":781,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":779,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(createdbyid",{"_index":584,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":568,"title":{},"body":{"injectables/MoviesService.html":{}}}],["this.validategenres(genreids",{"_index":586,"title":{},"body":{"injectables/MoviesService.html":{}}}],["thrilling",{"_index":188,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["throw",{"_index":383,"title":{},"body":{"injectables/GenresService.html":{},"injectables/MoviesService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":1029,"title":{},"body":{"index.html":{}}}],["title",{"_index":184,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{}}}],["titled",{"_index":581,"title":{},"body":{"injectables/MoviesService.html":{}}}],["total",{"_index":655,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalitems",{"_index":616,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":618,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1056,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":805,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transformer",{"_index":173,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["true})@isuuid('4",{"_index":205,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["true})@jointable",{"_index":429,"title":{},"body":{"entities/Movie.html":{}}}],["true})@type(undefined",{"_index":167,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["try",{"_index":549,"title":{},"body":{"injectables/MoviesService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":1062,"title":{},"body":{"index.html":{}}}],["type",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"entities/Genre.html":{},"controllers/GenresController.html":{},"injectables/GenresService.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/getMoviesBaseDto.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":318,"title":{},"body":{"entities/Genre.html":{},"injectables/GenresService.html":{},"entities/Movie.html":{},"injectables/MoviesService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([genre",{"_index":350,"title":{},"body":{"modules/GenresModule.html":{}}}],["typeormmodule.forfeature([movie",{"_index":512,"title":{},"body":{"modules/MoviesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":836,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":406,"title":{},"body":{"classes/GetMoviesDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{},"classes/getMoviesBaseDto.html":{}}}],["typescript",{"_index":956,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":201,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["undefined})@isarray()@arraynotempty()@isnotempty({each",{"_index":204,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["undefined})@isnumber()@min(1900)@max(undefined",{"_index":225,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["unique",{"_index":310,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["unit",{"_index":969,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":360,"title":{},"body":{"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1075,"title":{},"body":{"properties.html":{}}}],["unsuccessful",{"_index":818,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["update",{"_index":386,"title":{},"body":{"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"injectables/MoviesService.html":{}}}],["update(patchmoviedto",{"_index":530,"title":{},"body":{"injectables/MoviesService.html":{}}}],["updated",{"_index":391,"title":{},"body":{"injectables/GenresService.html":{},"controllers/MoviesController.html":{},"classes/PatchMovieDto.html":{}}}],["updated'})@isuuid()@isnotempty",{"_index":711,"title":{},"body":{"classes/PatchMovieDto.html":{}}}],["updatedata",{"_index":592,"title":{},"body":{"injectables/MoviesService.html":{}}}],["updatedatecolumn",{"_index":312,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["updateddate",{"_index":294,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["updatedgenre",{"_index":392,"title":{},"body":{"injectables/GenresService.html":{}}}],["updategenre",{"_index":354,"title":{},"body":{"injectables/GenresService.html":{}}}],["updategenre(patchgenredto",{"_index":364,"title":{},"body":{"injectables/GenresService.html":{}}}],["updatemovie",{"_index":451,"title":{},"body":{"controllers/MoviesController.html":{}}}],["updatemovie(@body",{"_index":500,"title":{},"body":{"controllers/MoviesController.html":{}}}],["updatemovie(patchmoviedto",{"_index":472,"title":{},"body":{"controllers/MoviesController.html":{}}}],["updates",{"_index":474,"title":{},"body":{"controllers/MoviesController.html":{},"index.html":{}}}],["updating",{"_index":596,"title":{},"body":{"injectables/MoviesService.html":{}}}],["url",{"_index":209,"title":{},"body":{"classes/CreateMovieDto.html":{},"injectables/PaginationProvider.html":{}}}],["url(this.request.originalurl",{"_index":676,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["url.searchparams.set('limit",{"_index":677,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["url.searchparams.set('page",{"_index":679,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["url.tostring",{"_index":681,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["used",{"_index":849,"title":{},"body":{"injectables/UsersService.html":{}}}],["usefactory",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":74,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/Movie.html":{},"injectables/MoviesService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":172,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":796,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.movies",{"_index":422,"title":{},"body":{"entities/Movie.html":{}}}],["user.service.ts",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_not_found",{"_index":553,"title":{},"body":{"injectables/MoviesService.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":471,"title":{},"body":{"controllers/MoviesController.html":{},"injectables/MoviesService.html":{}}}],["username",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":164,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":832,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":770,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":163,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:10",{"_index":168,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":737,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":785,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userscreatemanyusers",{"_index":845,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MoviesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":844,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":127,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/MoviesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1030,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":630,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["validategenres",{"_index":517,"title":{},"body":{"injectables/MoviesService.html":{}}}],["validategenres(genreids",{"_index":532,"title":{},"body":{"injectables/MoviesService.html":{}}}],["validatenested",{"_index":170,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["validationschema",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":157,"title":{},"body":{"classes/CreateGenreDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/GetMoviesDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchGenreDto.html":{},"classes/PatchMovieDto.html":{},"dependencies.html":{},"classes/getMoviesBaseDto.html":{}}}],["value",{"_index":536,"title":{},"body":{"injectables/MoviesService.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":299,"title":{},"body":{"entities/Genre.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["variable",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1076,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":850,"title":{},"body":{"injectables/UsersService.html":{}}}],["version",{"_index":1073,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1022,"title":{},"body":{"index.html":{}}}],["vigilante",{"_index":189,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["visit",{"_index":1012,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1025,"title":{},"body":{"index.html":{}}}],["void",{"_index":859,"title":{},"body":{"injectables/UsersService.html":{}}}],["want",{"_index":761,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":963,"title":{},"body":{"index.html":{}}}],["website",{"_index":1060,"title":{},"body":{"index.html":{}}}],["working",{"_index":1011,"title":{},"body":{"index.html":{}}}],["world",{"_index":104,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1038,"title":{},"body":{"index.html":{}}}],["year",{"_index":223,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["you'd",{"_index":1052,"title":{},"body":{"index.html":{}}}],["you're",{"_index":974,"title":{},"body":{"index.html":{}}}],["z\\d@!@#$%^&*]{8",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[!@#$%^&*])[a",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GenresModule.html":{},"modules/MoviesModule.html":{},"modules/PaginationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGenresModule\n\nGenresModule\n\nAppModule -->\n\nGenresModule->AppModule\n\n\n\n\n\nMoviesModule\n\nMoviesModule\n\nAppModule -->\n\nMoviesModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GenresModule\n                        \n                        \n                            MoviesModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { MoviesModule } from './movies/movies.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GenresModule } from './genres/genres.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport  appConfig  from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    MoviesModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env.development'],\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User, Movie, Genre],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'), // only for development\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    GenresModule,\n    PaginationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /**\n     * Inject Auth Service\n     */\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /**\n     * Inject UsersService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGenreDto.html":{"url":"classes/CreateGenreDto.html","title":"class - CreateGenreDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGenreDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/genres/dtos/create-genre.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/dtos/create-genre.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/dtos/create-genre.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, MaxLength } from 'class-validator';\n\nexport class CreateGenreDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(250)\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(500)\n  description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\n\nexport class CreateManyUsersDto {\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMovieDto.html":{"url":"classes/CreateMovieDto.html","title":"class - CreateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movies/dtos/create-movie.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                director\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                genres\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                rating\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                releaseYear\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdById\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'A thrilling movie about a vigilante hero.', description: 'A brief description of the movie', maxLength: 1000})@IsString()@IsOptional()@MaxLength(1000)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Christopher Nolan', description: 'The name of the movie director', minLength: 3, maxLength: 200})@IsString()@IsOptional()@MinLength(3)@MaxLength(200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'Array of ids of genres', type: undefined})@IsArray()@ArrayNotEmpty()@IsNotEmpty({each: true})@IsUUID('4', {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'https://example.com/images/dark-knight.jpg', description: 'A URL to the movie poster or image'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 9, description: 'Tha rating of the movie', minimum: 0, maximum: 10})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        releaseYear\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 2008, description: 'The release year of the movie', minimum: 1900, maximum: undefined})@IsNumber()@Min(1900)@Max(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'The Dark Knight', description: 'The title of the movie', maxLength: 250})@IsString()@IsNotEmpty()@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/create-movie.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n  IsUUID,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateMovieDto {\n  @ApiProperty({\n    example: 'The Dark Knight',\n    description: 'The title of the movie',\n    maxLength: 250,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(250)\n  title: string;\n\n  @ApiProperty({\n    example: ['e2c0c4e7-97dc-4d76-a9df-4b6a318ffba4'],\n    description: 'Array of ids of genres',\n    type: [String],\n  })\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsNotEmpty({ each: true })\n  @IsUUID('4', { each: true })\n  genres: string[];\n\n  @ApiProperty({\n    example: 'A thrilling movie about a vigilante hero.',\n    description: 'A brief description of the movie',\n    maxLength: 1000,\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(1000)\n  description?: string;\n\n  @ApiProperty({\n    example: 2008,\n    description: 'The release year of the movie',\n    minimum: 1900,\n    maximum: new Date().getFullYear(),\n  })\n  @IsNumber()\n  @Min(1900)\n  @Max(new Date().getFullYear())\n  releaseYear: number;\n\n  @ApiPropertyOptional({\n    example: 'Christopher Nolan',\n    description: 'The name of the movie director',\n    minLength: 3,\n    maxLength: 200,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(200)\n  director?: string;\n\n  @ApiProperty({\n    example: 9.0,\n    description: 'Tha rating of the movie',\n    minimum: 0,\n    maximum: 10,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  rating: number;\n\n  @ApiPropertyOptional({\n    example: 'https://example.com/images/dark-knight.jpg',\n    description: 'A URL to the movie poster or image',\n  })\n  @IsUrl()\n  @IsOptional()\n  imageUrl?: string;\n\n  @IsNotEmpty()\n  @IsUUID()\n  createdById: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d@!@#$%^&*]{8,}$/, {message: 'Password must be at least 8 characters long, contain at least one letter, one number, and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n  \n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n  \n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d@!@#$%^&*]{8,}$/, {\n    message:\n      'Password must be at least 8 characters long, contain at least one letter, one number, and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Genre.html":{"url":"entities/Genre.html","title":"entity - Genre","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Genre\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/genres/genre.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                movies\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/genre.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/genre.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/genre.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        movies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Movie[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, movie => movie.genres)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/genre.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 250, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/genre.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/genre.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Movie } from 'src/movies/movie.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Genre {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 250,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n  })\n  description: string;\n\n  @ManyToMany(() => Movie, (movie) => movie.genres)\n  movies: Movie[];\n\n  @CreateDateColumn()\n  createdDate: Date;\n\n  @UpdateDateColumn()\n  updatedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GenresController.html":{"url":"controllers/GenresController.html","title":"controller - GenresController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GenresController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/genres/genres.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                genres\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createGenre\n                            \n                            \n                                    \n                                    Public\n                                getAllGenres\n                            \n                            \n                                    \n                                    Public\n                                patchGenre\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createGenre\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGenre(createGenreDto: CreateGenreDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/genres/genres.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGenreDto\n                                            \n                                                            CreateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getAllGenres\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllGenres()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/genres/genres.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchGenre\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchGenre(patchGenreDto: PatchGenreDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/genres/genres.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchGenreDto\n                                            \n                                                            PatchGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Patch, Post } from '@nestjs/common';\nimport { GenresService } from './providers/genres.service';\nimport { CreateGenreDto } from './dtos/create-genre.dto';\nimport { PatchGenreDto } from './dtos/patch-genre.dto';\n\n@Controller('genres')\nexport class GenresController {\n  constructor(\n    /**\n     * Inject Genres Service\n     */\n    private readonly genresService: GenresService,\n  ) {}\n\n  @Get()\n  public getAllGenres() {\n    return this.genresService.getAllGenres();\n  }\n\n  @Post()\n  public createGenre(@Body() createGenreDto: CreateGenreDto) {\n    return this.genresService.createGenre(createGenreDto);\n  }\n\n  @Patch()\n  public patchGenre(@Body() patchGenreDto: PatchGenreDto) {\n    return this.genresService.updateGenre(patchGenreDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GenresModule.html":{"url":"modules/GenresModule.html","title":"module - GenresModule","body":"\n                   \n\n\n\n\n    Modules\n    GenresModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GenresModule\n\n\n\ncluster_GenresModule_providers\n\n\n\ncluster_GenresModule_exports\n\n\n\n\nGenresService \n\nGenresService \n\n\n\nGenresModule\n\nGenresModule\n\nGenresService  -->\n\nGenresModule->GenresService \n\n\n\n\n\nGenresService\n\nGenresService\n\nGenresModule -->\n\nGenresService->GenresModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/genres/genres.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GenresService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GenresController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GenresService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GenresController } from './genres.controller';\nimport { GenresService } from './providers/genres.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Genre } from './genre.entity';\n\n@Module({\n  controllers: [GenresController],\n  providers: [GenresService],\n  imports: [TypeOrmModule.forFeature([Genre])],\n  exports: [GenresService],\n})\nexport class GenresModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenresService.html":{"url":"injectables/GenresService.html","title":"injectable - GenresService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenresService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/genres/providers/genres.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGenre\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleGenres\n                            \n                            \n                                    Public\n                                    Async\n                                getAllGenres\n                            \n                            \n                                    Public\n                                    Async\n                                updateGenre\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(genresRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/genres/providers/genres.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        genresRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGenre\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGenre(createGenreDto: CreateGenreDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/genres/providers/genres.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGenreDto\n                                            \n                                                            CreateGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleGenres\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleGenres(genres: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/genres/providers/genres.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                genres\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllGenres\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllGenres()\n                \n            \n\n\n                    \n                        \n                            Defined in src/genres/providers/genres.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateGenre\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateGenre(patchGenreDto: PatchGenreDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/genres/providers/genres.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchGenreDto\n                                            \n                                                            PatchGenreDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { In, Repository } from 'typeorm';\nimport { Genre } from '../genre.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateGenreDto } from '../dtos/create-genre.dto';\nimport { PatchGenreDto } from '../dtos/patch-genre.dto';\n\n@Injectable()\nexport class GenresService {\n  constructor(\n    /**\n     * Inject genresRepository\n     */\n    @InjectRepository(Genre)\n    private readonly genresRepository: Repository,\n  ) {}\n\n  public async createGenre(createGenreDto: CreateGenreDto) {\n    // Check if genre exists with same name\n    const existingGenre = await this.genresRepository.findOne({\n      where: { name: createGenreDto.name },\n    });\n    // Handle exception\n\n    // Create a new genre\n    let newGenre = this.genresRepository.create(createGenreDto);\n    newGenre = await this.genresRepository.save(newGenre);\n\n    return newGenre;\n  }\n\n  public async updateGenre(patchGenreDto: PatchGenreDto) {\n    // Find the genre by ID\n    const { id, ...genreUpdate } = patchGenreDto;\n    const genre = await this.genresRepository.findOne({\n      where: { id },\n    });\n    if (!genre) {\n      throw new NotFoundException(`Genre with ID \"${id}\" not found\"`);\n    }\n\n    // Update the genre's fields\n    Object.assign(genre, genreUpdate);\n\n    // Save the updated genre\n    const updatedGenre = await this.genresRepository.save(genre);\n\n    // Return the updated genre\n    return updatedGenre;\n  }\n\n  public async getAllGenres() {\n    const allGenres = await this.genresRepository.find();\n    return allGenres;\n  }\n\n  public async findMultipleGenres(genres: string[]) {\n    let results = await this.genresRepository.find({\n      where: {\n        id: In(genres),\n      },\n    });\n\n    return results;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetMoviesDto.html":{"url":"classes/GetMoviesDto.html","title":"class - GetMoviesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetMoviesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movies/dtos/get-movies.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  getMoviesBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/mapped-types';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\nclass getMoviesBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetMoviesDto extends IntersectionType(\n  getMoviesBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsString()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsString()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Movie.html":{"url":"entities/Movie.html","title":"entity - Movie","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movies/movie.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                director\n                            \n                            \n                                    \n                                    \n                                genres\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                rating\n                            \n                            \n                                    \n                                releaseYear\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.movies, {nullable: false, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1000, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        genres\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Genre[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, genre => genre.movies, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1000, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 3, scale: 1, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        releaseYear\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 250, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/movie.entity.ts:76\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Genre } from 'src/genres/genre.entity';\nimport { User } from 'src/users/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Movie {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 250,\n    unique: true,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1000,\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'int',\n    nullable: false,\n  })\n  releaseYear: number;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: true,\n  })\n  director: string;\n\n  @Column({\n    type: 'decimal',\n    precision: 3,\n    scale: 1,\n    nullable: false,\n  })\n  rating: number;\n\n  @Column({\n    type: 'varchar',\n    length: 1000,\n    nullable: true,\n  })\n  imageUrl: string;\n\n  @ManyToMany(() => Genre, (genre) => genre.movies, { eager: true })\n  @JoinTable()\n  genres: Genre[];\n\n  @ManyToOne(() => User, (user) => user.movies, {\n    nullable: false,\n    eager: true,\n  })\n  createdBy: User;\n\n  @CreateDateColumn()\n  createdDate: Date;\n\n  @UpdateDateColumn()\n  updatedDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MoviesController.html":{"url":"controllers/MoviesController.html","title":"controller - MoviesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MoviesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movies/movies.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movies\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createMovie\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                deleteMovie\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getMovies\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updateMovie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMovie(createMovieDto: CreateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new movie'})@ApiResponse({status: 201, description: 'You get a 201 response if your movie is created successfully'})@ApiBody({description: 'The details of the movie to create', type: CreateMovieDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/movies/movies.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMovieDto\n                                            \n                                                            CreateMovieDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        deleteMovie\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMovie(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/movies/movies.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getMovies\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMovies(userId: string, movieQuery: GetMoviesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/{:userId}')\n                \n            \n\n                    \n                        \n                            Defined in src/movies/movies.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        GET localhost:3000/movies/:userId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                movieQuery\n                                            \n                                                            GetMoviesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updateMovie\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMovie(patchMovieDto: PatchMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing movie'})@ApiResponse({status: 200, description: 'You get a 200 response if your movie is updated successfully'})@ApiBody({description: 'The details of the movie to update', type: PatchMovieDto})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/movies/movies.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchMovieDto\n                                            \n                                                            PatchMovieDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { MoviesService } from './providers/movies.service';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateMovieDto } from './dtos/create-movie.dto';\nimport { PatchMovieDto } from './dtos/patch-movie.dto';\nimport { GetMoviesDto } from './dtos/get-movies.dto';\n\n@Controller('movies')\n@ApiTags('Movies')\nexport class MoviesController {\n  constructor(\n    /**\n     * Inject Movies Service\n     */\n    private readonly moviesService: MoviesService,\n  ) {}\n\n  /**\n   * GET localhost:3000/movies/:userId\n   */\n  @Get('/{:userId}')\n  public async getMovies(\n    @Param('userId') userId: string,\n    @Query() movieQuery: GetMoviesDto,\n  ) {\n    console.log(movieQuery);\n    return await this.moviesService.findAll(movieQuery, userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new movie',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your movie is created successfully',\n  })\n  @ApiBody({\n    description: 'The details of the movie to create',\n    type: CreateMovieDto,\n  })\n  @Post()\n  public createMovie(@Body() createMovieDto: CreateMovieDto) {\n    return this.moviesService.create(createMovieDto);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing movie',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'You get a 200 response if your movie is updated successfully',\n  })\n  @ApiBody({\n    description: 'The details of the movie to update',\n    type: PatchMovieDto,\n  })\n  @Patch()\n  public updateMovie(@Body() patchMovieDto: PatchMovieDto) {\n    return this.moviesService.update(patchMovieDto);\n  }\n\n  @Delete('/:id')\n  public async deleteMovie(@Param('id') id: string) {\n    return await this.moviesService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MoviesModule.html":{"url":"modules/MoviesModule.html","title":"module - MoviesModule","body":"\n                   \n\n\n\n\n    Modules\n    MoviesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MoviesModule\n\n\n\ncluster_MoviesModule_imports\n\n\n\ncluster_MoviesModule_providers\n\n\n\n\nGenresModule\n\nGenresModule\n\n\n\nMoviesModule\n\nMoviesModule\n\nMoviesModule -->\n\nGenresModule->MoviesModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nMoviesModule -->\n\nPaginationModule->MoviesModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nMoviesModule -->\n\nUsersModule->MoviesModule\n\n\n\n\n\nMoviesService\n\nMoviesService\n\nMoviesModule -->\n\nMoviesService->MoviesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/movies/movies.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MoviesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MoviesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GenresModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MoviesService } from './providers/movies.service';\nimport { MoviesController } from './movies.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Movie } from './movie.entity';\nimport { GenresModule } from 'src/genres/genres.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  controllers: [MoviesController],\n  providers: [MoviesService],\n  imports: [\n    UsersModule,\n    GenresModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([Movie]),\n  ],\n})\nexport class MoviesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MoviesService.html":{"url":"injectables/MoviesService.html","title":"injectable - MoviesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MoviesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movies/providers/movies.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Private\n                                    Async\n                                findMovieById\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                    Private\n                                    Async\n                                validateGenres\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, moviesRepository: Repository, genresService: GenresService, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/movies/providers/movies.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        moviesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        genresService\n                                                  \n                                                        \n                                                                        GenresService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMovieDto: CreateMovieDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/movies/providers/movies.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMovieDto\n                                            \n                                                            CreateMovieDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/movies/providers/movies.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(movieQuery: GetMoviesDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/movies/providers/movies.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                movieQuery\n                                            \n                                                            GetMoviesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        findMovieById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMovieById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/movies/providers/movies.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchMovieDto: PatchMovieDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/movies/providers/movies.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchMovieDto\n                                            \n                                                            PatchMovieDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        validateGenres\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGenres(genreIds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/movies/providers/movies.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                genreIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MoviesService.name)\n                    \n                \n                    \n                        \n                                Defined in src/movies/providers/movies.service.ts:48\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreateMovieDto } from '../dtos/create-movie.dto';\nimport { Repository } from 'typeorm';\nimport { Movie } from '../movie.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GenresService } from 'src/genres/providers/genres.service';\nimport { PatchMovieDto } from '../dtos/patch-movie.dto';\nimport { Genre } from 'src/genres/genre.entity';\nimport { GetMoviesDto } from '../dtos/get-movies.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\n\nconst ERROR_MESSAGES = {\n  DATABASE_CONNECTION: 'A database error occurred. Please try again later.',\n  MOVIE_NOT_FOUND: (id: string) => `The movie with ID '${id}' was not found.`,\n  USER_NOT_FOUND: (id: string) => `The user with ID '${id}' was not found.`,\n  GENRES_NOT_FOUND: 'One or more genres were not found for the provided IDs.',\n};\n\n@Injectable()\nexport class MoviesService {\n  constructor(\n    /**\n     * Inject UsersService\n     */\n    private readonly usersService: UsersService,\n    /**\n     * Inject moviesRepository\n     */\n    @InjectRepository(Movie)\n    private readonly moviesRepository: Repository,\n    /**\n     * Inject GenresService\n     */\n    private readonly genresService: GenresService,\n    /**\n     *  Inject PaginationProvider\n     */\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  private readonly logger = new Logger(MoviesService.name);\n\n  private async validateGenres(genreIds: string[]): Promise {\n    const genres = await this.genresService.findMultipleGenres(genreIds);\n\n    if (genres.length !== genreIds.length) {\n      throw new NotFoundException(ERROR_MESSAGES.GENRES_NOT_FOUND);\n    }\n    return genres;\n  }\n\n  private async findMovieById(id: string): Promise {\n    const movie = await this.moviesRepository.findOne({\n      where: { id },\n      relations: ['genres'],\n    });\n\n    if (!movie) {\n      throw new NotFoundException(ERROR_MESSAGES.MOVIE_NOT_FOUND(id));\n    }\n    return movie;\n  }\n\n  public async findAll(\n    movieQuery: GetMoviesDto,\n    userId: string,\n  ): Promise> {\n    this.logger.debug(`Starting findAll method with data, userId: ${userId}`);\n\n    const user = await this.usersService.findOneById(userId);\n    if (!user) {\n      throw new NotFoundException(ERROR_MESSAGES.USER_NOT_FOUND(userId));\n    }\n\n    try {\n      const { page = 1, limit = 10 } = movieQuery;\n      return await this.paginationProvider.paginateQuery(\n        { page, limit },\n        this.moviesRepository,\n      );\n    } catch (error) {\n      this.logger.error('Error retrieving movies:', error.stack);\n      throw new InternalServerErrorException(\n        ERROR_MESSAGES.DATABASE_CONNECTION,\n      );\n    }\n  }\n\n  public async create(createMovieDto: CreateMovieDto): Promise {\n    this.logger.debug(\n      `Creating movie titled '${createMovieDto.title}' by userId: ${createMovieDto.createdById}`,\n    );\n\n    const { createdById, genres: genreIds } = createMovieDto;\n\n    const createdBy = await this.usersService.findOneById(createdById);\n    if (!createdBy) {\n      throw new NotFoundException(ERROR_MESSAGES.USER_NOT_FOUND(createdById));\n    }\n\n    const genres = await this.validateGenres(genreIds);\n\n    const newMovie = this.moviesRepository.create({\n      ...createMovieDto,\n      createdBy,\n      genres,\n    });\n\n    try {\n      return await this.moviesRepository.save(newMovie);\n    } catch (error) {\n      this.logger.error('Error while saving the movie:', error.stack);\n      throw new InternalServerErrorException(\n        ERROR_MESSAGES.DATABASE_CONNECTION,\n      );\n    }\n  }\n\n  public async update(patchMovieDto: PatchMovieDto): Promise {\n    this.logger.debug(`Updating the movie`);\n\n    const { id, genres: genreIds, ...updateData } = patchMovieDto;\n\n    const movie = await this.findMovieById(id);\n\n    if (genreIds) {\n      const genres = await this.validateGenres(genreIds);\n      movie.genres = genres;\n    }\n\n    Object.assign(movie, updateData);\n\n    try {\n      return await this.moviesRepository.save(movie);\n    } catch (error) {\n      this.logger.error('Error while updating the movie:', error.stack);\n      throw new InternalServerErrorException(\n        ERROR_MESSAGES.DATABASE_CONNECTION,\n      );\n    }\n  }\n\n  public async delete(id: string): Promise {\n    this.logger.debug(`Starting delete method with data, id: ${id}`);\n\n    const movie = await this.findMovieById(id);\n\n    if (!movie) {\n      this.logger.error(`Movie with ID ${id} not found during delete`);\n      throw new NotFoundException(ERROR_MESSAGES.MOVIE_NOT_FOUND(id));\n    }\n    try {\n      await this.moviesRepository.delete(id);\n    } catch (error) {\n      this.logger.error('Error while deleting the movie:', error.stack);\n      throw new InternalServerErrorException(\n        ERROR_MESSAGES.DATABASE_CONNECTION,\n      );\n    }\n    return movie;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for paginated responses.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The array of items for the current page.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Links for navigation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Metadata abut the pagination.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  /**\n   * The array of items for the current page.\n   */\n  data: T[];\n\n  /**\n   * Metadata abut the pagination.\n   */\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  \n  /**\n   * Links for navigation.\n   */\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service providing pagination utilities for repositories.\nBuilds paginated responses with metadata and navigation links.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:16\n                            \n                        \n\n                \n                    \n                            Injects the current HTTP request to build pagination links.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The current Express request object.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:33\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Paginates a query on the given repository and returns a paginated response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The pagination options (page, limit).\n\n                                            \n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The TypeORM repository to paginate.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated response with metadata and navigation links.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n/**\n * Service providing pagination utilities for repositories.\n * Builds paginated responses with metadata and navigation links.\n *\n * @export\n * @class PaginationProvider\n */\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * Injects the current HTTP request to build pagination links.\n   * @param request The current Express request object.\n   */\n  constructor(\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  /**\n   * Paginates a query on the given repository and returns a paginated response.\n   *\n   * @param paginationQuery The pagination options (page, limit).\n   * @param repository The TypeORM repository to paginate.\n   * @returns {Promise>} A paginated response with metadata and navigation links.\n   */\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    const { page = 1, limit = 10 } = paginationQuery;\n\n    // Fetch paginated results and total item count\n    let [results, totalItems] = await repository.findAndCount({\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    /**\n     * Calculating pagination metadata\n     */\n    const totalPages = Math.max(1, Math.ceil(totalItems / limit));\n    // Determine next and previous page numbers\n    const nextPage = page === totalPages ? page : page + 1;\n    const previousPage = page === 1 ? 1 : page - 1;\n\n    /**\n     * Helper to build a page link for a given page number.\n     * @param p The page number.\n     * @returns The full URL for the requested page.\n     */\n    const baseURL = `${this.request.protocol}://${this.request.headers.host}`;\n\n    const buildPageLink = (p: number) => {\n      const url = new URL(this.request.originalUrl, baseURL);\n      url.searchParams.set('limit', limit.toString());\n      url.searchParams.set('page', p.toString());\n      return url.toString();\n    };\n\n    /**\n     * Build the final paginated response object.\n     */\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: limit,\n        totalItems: totalItems,\n        currentPage: page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: buildPageLink(1),\n        last: buildPageLink(totalPages),\n        current: buildPageLink(page),\n        next: buildPageLink(nextPage),\n        previous: buildPageLink(previousPage),\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Max(200)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:11\n                        \n                    \n\n            \n                \n                    The maximum number of items to return per page.\nMust be a positive number and cabbot exceed 200.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()@Max(1000)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:20\n                        \n                    \n\n            \n                \n                    The page number to retrieve.\nMust be positive number and cannot exceed 1000.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive, Max } from 'class-validator';\n\nexport class PaginationQueryDto {\n  /**\n   * The maximum number of items to return per page.\n   * Must be a positive number and cabbot exceed 200.\n   */\n  @IsOptional()\n  @IsPositive()\n  @Max(200)\n  limit?: number = 10;\n\n  /**\n   * The page number to retrieve.\n   * Must be positive number and cannot exceed 1000.\n   */\n  @IsOptional()\n  @IsPositive()\n  @Max(1000)\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchGenreDto.html":{"url":"classes/PatchGenreDto.html","title":"class - PatchGenreDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchGenreDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/genres/dtos/patch-genre.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateGenreDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/genres/dtos/patch-genre.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateGenreDto } from './create-genre.dto';\nimport { IsNotEmpty, IsString, IsUUID } from 'class-validator';\n\nexport class PatchGenreDto extends PartialType(CreateGenreDto) {\n  @IsUUID()\n  @IsNotEmpty()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchMovieDto.html":{"url":"classes/PatchMovieDto.html","title":"class - PatchMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movies/dtos/patch-movie.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateMovieDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the movie that needs to be updated'})@IsUUID()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/patch-movie.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty, IsString, IsUUID } from 'class-validator';\nimport { CreateMovieDto } from './create-movie.dto';\n\nexport class PatchMovieDto extends PartialType(CreateMovieDto) {\n  @ApiProperty({\n    description: 'The ID of the movie that needs to be updated',\n  })\n  @IsUUID()\n  @IsNotEmpty()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                movies\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                updatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        movies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Movie[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, movie => movie.createdBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { Movie } from 'src/movies/movie.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 200,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Movie, (movie) => movie.createdBy)\n  movies: Movie[]; // List of movies created by the user\n\n  @CreateDateColumn()\n  createdDate: Date;\n\n  @UpdateDateColumn()\n  updatedDate: Date;\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/{:id}')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    /**\n     * Inject Users Service\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get('/{:id}')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The position of the page number that you want to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsersDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n  constructor(\n    /**\n     * Inject DataSource\n     */\n    private readonly dataSource: DataSource,\n  ) {}\n\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    let newUsers: User[] = [];\n    // Create Query Runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // Connect Query Runner to datasource\n      await queryRunner.connect();\n      // Start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new InternalServerErrorException(\n        'Failed to connect to the database while starting a transaction.',\n      );\n    }\n\n    try {\n      for (let user of createManyUsersDto.users) {\n        let newUser = queryRunner.manager.create(User, user);\n        let result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      // If successful commit\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // If unsuccessful rollback\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // Release connection\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, UsersCreateManyProvider],\n  exports: [UsersService],\n  imports: [\n    forwardRef(() => AuthModule), \n    TypeOrmModule.forFeature([User])\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, configService: ConfigService, dataSource: DataSource, usersCreateManyUsers: UsersCreateManyProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructs the UsersService with required dependencies\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service used to verify users\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        usersCreateManyUsers\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Retrieves all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO containing query parameters for filtering users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of users to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                An array of user objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Find a single user by their ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The user object containing the user's details.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructs the UsersService with required dependencies\n   * @param authService - The authentication service used to verify users\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    /**\n     * Inject usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    /**\n     * Inject configService\n     */\n    private readonly configService: ConfigService,\n    /**\n     * Inject DataSource\n     */\n    private readonly dataSource: DataSource,\n    /**\n     * Inject usersCreateManyProvider\n     */\n    private readonly usersCreateManyUsers: UsersCreateManyProvider,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser: User | null = null;\n\n    // Check if user exists with same email\n    try {\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      console.error('Database connection error:', error);\n      throw new InternalServerErrorException(\n        'An error occurred while checking for existing users. Please try again later.',\n      );\n    }\n\n    // Handle exception\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user already exists. Please check your email.',\n      );\n    }\n\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      console.error('Database save error:', error);\n      throw new InternalServerErrorException(\n        'An error occurred while creating the user. Please try again later.',\n      );\n    }\n\n    return newUser;\n  }\n\n  /**\n   * Retrieves all users from the database\n   *\n   * @param {GetUsersParamDto} getUsersParamDto - The DTO containing query parameters for filtering users.\n   * @param {number} limit - The maximum number of users to retrieve.\n   * @param {number} page - The page number for pagination.\n   * @returns {Array} An array of user objects.\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: 'The API endpoint does not exist',\n        fileName: 'user.service.ts',\n        lineNumber: 97,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        cause: new Error(),\n        description: 'Occured because the API endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Find a single user by their ID\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {{ id: number; firstName: string; email: string }} The user object containing the user's details.\n   */\n  public async findOneById(id: string): Promise {\n    let user;\n\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      console.error('Database connection error:', error);\n      throw new InternalServerErrorException(\n        'An error occurred while retrieving the user. Please try again later.',\n      );\n    }\n\n    if (!user) {\n      throw new NotFoundException(`The User with ID \"${id}\" not found`);\n    }\n\n    return user;\n  }\n\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyUsers.createMany(createManyUsersDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/genres/dtos/create-genre.dto.ts\n            \n            class\n            CreateGenreDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/genres/dtos/patch-genre.dto.ts\n            \n            class\n            PatchGenreDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/genres/genre.entity.ts\n            \n            entity\n            Genre\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/genres/genres.controller.ts\n            \n            controller\n            GenresController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/genres/providers/genres.service.ts\n            \n            injectable\n            GenresService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movies/dtos/create-movie.dto.ts\n            \n            class\n            CreateMovieDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/movies/dtos/get-movies.dto.ts\n            \n            class\n            getMoviesBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/movies/dtos/get-movies.dto.ts\n            \n            class\n            GetMoviesDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movies/dtos/patch-movie.dto.ts\n            \n            class\n            PatchMovieDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/movies/movie.entity.ts\n            \n            entity\n            Movie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movies/movies.controller.ts\n            \n            controller\n            MoviesController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/movies/providers/movies.service.ts\n            \n            injectable\n            MoviesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/movies/providers/movies.service.ts\n            \n            variable\n            ERROR_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.1.5\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.15.6\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/getMoviesBaseDto.html":{"url":"classes/getMoviesBaseDto.html","title":"class - getMoviesBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  getMoviesBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movies/dtos/get-movies.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/get-movies.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movies/dtos/get-movies.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/mapped-types';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\nclass getMoviesBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetMoviesDto extends IntersectionType(\n  getMoviesBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GenresModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MoviesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GenresModule\n\n\n\ncluster_GenresModule_exports\n\n\n\ncluster_GenresModule_providers\n\n\n\ncluster_MoviesModule\n\n\n\ncluster_MoviesModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nGenresModule\n\nGenresModule\n\n\n\nMoviesModule\n\nMoviesModule\n\nMoviesModule -->\n\nGenresModule->MoviesModule\n\n\n\nAppModule -->\n\nGenresModule->AppModule\n\n\n\n\n\nGenresService \n\nGenresService \n\nGenresService  -->\n\nGenresModule->GenresService \n\n\n\nAppModule -->\n\nMoviesModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nMoviesModule -->\n\nPaginationModule->MoviesModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nMoviesModule -->\n\nUsersModule->MoviesModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenresService\n\nGenresService\n\nGenresModule -->\n\nGenresService->GenresModule\n\n\n\n\n\nMoviesService\n\nMoviesService\n\nMoviesModule -->\n\nMoviesService->MoviesModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            ERROR_MESSAGES   (src/.../movies.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/movies/providers/movies.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ERROR_MESSAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  DATABASE_CONNECTION: 'A database error occurred. Please try again later.',\n  MOVIE_NOT_FOUND: (id: string) => `The movie with ID '${id}' was not found.`,\n  USER_NOT_FOUND: (id: string) => `The user with ID '${id}' was not found.`,\n  GENRES_NOT_FOUND: 'One or more genres were not found for the provided IDs.',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
